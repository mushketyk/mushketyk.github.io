---
layout: post
title: "Generators and 'yield' to create iterators in Python"
date: 2015-09-10 08:43:18 +0100
comments: true
categories:
---



## How to generate an iterator

Python provides a very concise syntax to iterator. For example. We can create an iterator for the first 100 fibonachi numbers.
To do it we can define a simple function like this:

```python

def fib(n):
        print "fib({})".format(n)
        if n < 0:
                        raise ValueError("Input should be non-negative")
        if n == 0 or n == 1:
                        return n
        a, b = 0, 1
        for i in range(1, n+1):
                        a, b = b, a + b
        return b

>>> fib(2)
fib(2)
2
>>> fib(11)
fib(11)
144

```

Now we can create an interator for the first 100 fibonachi numbers

```python

it = (fib(i) for i in range(100))

```


It looks similar to Python's list comprehension, but actually behaves in a completely different way.

The first expression will call the fib funtion only when the next method on a result iterator is called:

```python

>>> it.next()
fib(0)
0
>>> it.next()
fib(1)
1

```

In contrast, if we use list comprehension all 100 calls too the fib function would be performed before the result list is created:


```python
>>> lst = [fib(i) for i in range(100)]
fib(0)
fib(1)
fib(2)
...
fib(98)
fib(99)
>>> lst
[0, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074, 32951280099, 53316291173, 86267571272, 139583862445, 225851433717, 365435296162, 591286729879, 956722026041, 1548008755920, 2504730781961, 4052739537881, 6557470319842, 10610209857723, 17167680177565, 27777890035288, 44945570212853, 72723460248141, 117669030460994, 190392490709135, 308061521170129, 498454011879264, 806515533049393, 1304969544928657, 2111485077978050, 3416454622906707, 5527939700884757, 8944394323791464, 14472334024676221, 23416728348467685, 37889062373143906, 61305790721611591, 99194853094755497, 160500643816367088, 259695496911122585, 420196140727489673, 679891637638612258, 1100087778366101931, 1779979416004714189, 2880067194370816120, 4660046610375530309, 7540113804746346429, 12200160415121876738L, 19740274219868223167L, 31940434634990099905L, 51680708854858323072L, 83621143489848422977L, 135301852344706746049L, 218922995834555169026L, 354224848179261915075L]
>>>
```
As you can see all numbers were created in advance

## The power of yield

```python

>>> def create_generator():
	for i in range(5):
		yield i


>>> gen = cre

Traceback (most recent call last):
  File "<pyshell#37>", line 1, in <module>
    gen = cre
NameError: name 'cre' is not defined
>>> gen = create_generator()
>>> gen.next()
0
>>> gen.next()
1
>>> gen.next()
2
>>> gen.next()
3
>>> gen.next()
4
>>> gen.next()

Traceback (most recent call last):
  File "<pyshell#44>", line 1, in <module>
    gen.next()
StopIteration

```

```python

>>> def create_generator():
	for i in range(1, 5):
		print "Creating first number"
		yield i
		print "Creating second number"
		yield i * 10
		print "Creating third number"
		yield 1 * 100


>>> gen = create_generator()
>>> gen.next()
Creating first number
1
>>> gen.next()
Creating second number
10
>>> gen.next()
Creating third number
100
>>> gen.next()
Creating first number
2
>>>

```


```python
>>> def inorder(tree):
	if tree:
		for l_child in inorder(tree.left):
			yield l_child
		yield tree.data
		for r_child in inorder(tree.right):
			yield r_child


>>> list(inorder(tree))
[1, 2, 3]
>>> tree = Node(4, Node(2, Node(1), Node(3)), Node(6, Node(5), Node(7)))
>>> list(inorder(tree))
[1, 2, 3, 4, 5, 6, 7]

```

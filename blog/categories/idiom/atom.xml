<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Idiom | Software Developer's diary]]></title>
  <link href="http://mushketyk.github.io/blog/categories/idiom/atom.xml" rel="self"/>
  <link href="http://mushketyk.github.io/"/>
  <updated>2015-09-10T21:24:40+01:00</updated>
  <id>http://mushketyk.github.io/</id>
  <author>
    <name><![CDATA[Ivan Mushketyk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Idiomatic Way to Count in Python]]></title>
    <link href="http://mushketyk.github.io/blog/2015/08/27/idiomatic-way-to-count-in-python/"/>
    <updated>2015-08-27T20:07:29+01:00</updated>
    <id>http://mushketyk.github.io/blog/2015/08/27/idiomatic-way-to-count-in-python</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s say we want to count how many time each item appears in a Python list:</p>

<pre><code class="python">lst = ['fred', 'john', 'mike', 'fred']
</code></pre>

<p>and we expect the following result:</p>

<pre><code class="python">{'mike': 1, 'john': 1, 'fred': 2}
</code></pre>

<p>Here is a simple but not idiomatic solution:</p>

<!--more-->


<pre><code class="python">def count_1(lst):
    res = {}
    for v in lst:
        # if this is the first time we see this value
        if v not in res:
            # set count to 1
            res[v] = 1
        else:
            # increment existing counter
            res[v] += 1
    return res

&gt;&gt;&gt; count_1(lst)
{'mike': 1, 'john': 1, 'fred': 2}
</code></pre>

<p>This solution works, but it is so unPythonic. There should be a way to get rid of this ugly if statement inside the loop.</p>

<p>One way would be to use dict.get() method that can return a specified value if a requested key is not presented in a dictionary:</p>

<pre><code class="python">&gt;&gt;&gt; d = {'key': 'val'}
&gt;&gt;&gt; d.get('key')
'val'
&gt;&gt;&gt; d.get('non-existing', 42)
42
</code></pre>

<p>Now we can use is to rewrite our function:</p>

<pre><code class="python">def count_2(lst):
    res = {}
    for v in lst:
        res[v] = res.get(v, 0) + 1
    return res

&gt;&gt;&gt; count_2(lst)
{'mike': 1, 'john': 1, 'fred': 2}
</code></pre>

<p>This seems to be much better, but we are not done yet. Python has a specialized type of a dictionary that can return a default value for a non existing key. To specify what default value should be returned we can optionally pass a function:</p>

<pre><code class="python">&gt;&gt;&gt; d = defaultdict(lambda: 42)
&gt;&gt;&gt; d['key'] = 'value'
&gt;&gt;&gt; d['non-existing']
42
&gt;&gt;&gt; d['key']
'value'
</code></pre>

<p>Now we can rewrite this function using defaultdict:</p>

<pre><code class="python">&gt;&gt;&gt; def count_3(lst):
    res = defaultdict(lambda: 0)
    for v in lst:
        res[v] += 1
    return res

&gt;&gt;&gt; dict(count_3(l))
{'mike': 1, 'john': 1, 'fred': 2}
</code></pre>

<p>This is much better. But to be really idiomatic we can use Counter class from  <a href="https://docs.python.org/2/library/collections.html">collections</a> library:</p>

<pre><code class="python">&gt;&gt;&gt; count = Counter(l)
&gt;&gt;&gt; dict(count)
{'mike': 1, 'john': 1, 'fred': 2}
</code></pre>

<p>In addtion Counter class also provides more useful methods to work with counts <a href="https://docs.python.org/2/library/collections.html#collections.Counter">operations</a> such as addition of counters, subtraction, intersection, etc.</p>
]]></content>
  </entry>
  
</feed>

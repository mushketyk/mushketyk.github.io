<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | Software Developer's diary]]></title>
  <link href="http://mushketyk.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://mushketyk.com/"/>
  <updated>2016-04-03T21:13:28+01:00</updated>
  <id>http://mushketyk.com/</id>
  <author>
    <name><![CDATA[Ivan Mushketyk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python in One Hour. Part 2]]></title>
    <link href="http://mushketyk.com/2016/03/29/python-in-one-hour-part-2/"/>
    <updated>2016-03-29T08:56:28+01:00</updated>
    <id>http://mushketyk.com/2016/03/29/python-in-one-hour-part-2</id>
    <content type="html"><![CDATA[This is the second part of the "Python in 1 hour" tutorial. It will go into more advanced Python features that will help you to develop complex and robust applications.

The only prerequisite for this article is that you should be familiar with the content of the part of this tutorial that you can find [here](/2016/03/28/python-in-one-hour-part-1/).

<!--more-->

# Comprehensions

If you have been programming for some time you probably wrote a lot of loops where need to change every value in a collection like:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">res</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">strings</span><span class="p">:</span>
</span><span class='line'>  <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">lower</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>

Probably even more often you are writing code that needs to filter a collection based on some criteria:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">non_empty</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">strings</span><span class="p">:</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">s</span> <span class="o">!=</span> <span class="s">&quot;&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">non_empty</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

Python has a very powerful syntax that can help you to do just that. For instance, the first example in this section can be rewritten like this:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">res</span> <span class="o">=</span> <span class="p">[</span><span class="n">s</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">strings</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>

This construction called a list comprehensions and it allows us to transform a list in just one line of code. It has two parts. The left part before the **for** keyword defines the transformation of every element in the original collection. The right part defines what collection should be processed and a variable name that will be used to access every element of this collection.

Notice that this will not change a list in-place but will create a new list instead. To update a list in-place you need to use a **for** loop.

To filter a collection we just to change the comprehension expression slightly:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">res</span> <span class="o">=</span> <span class="p">[</span><span class="n">s</span> <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">strings</span> <span class="k">if</span> <span class="n">s</span> <span class="o">!=</span> <span class="s">&quot;&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>

This construction will only return those elements for which the expression in the **if** clause is true.

Filtering and updating can be combined together in a single list comprehension. We can do this with the following expression.

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">res</span> <span class="o">=</span> <span class="p">[</span><span class="n">s</span><span class="o">.</span><span class="n">lower</span> <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">strings</span> <span class="k">if</span> <span class="n">s</span> <span class="o">!=</span> <span class="s">&quot;foo&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>

Comprehensions can be written not only for lists but also for dictionaries and sets. To make a comprehension expression that will return a set, simply use curly brackets instead of square once:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">numbers</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">}</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">even</span> <span class="o">=</span> <span class="p">{</span><span class="n">n</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">numbers</span> <span class="k">if</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">}</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">even</span>
</span><span class='line'><span class="nb">set</span><span class="p">([</span><span class="mi">8</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>

To create a dictionary comprehension use the following expression:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="p">{</span><span class="n">n</span><span class="p">:</span> <span class="n">n</span> <span class="o">**</span> <span class="mi">2</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]}</span>
</span><span class='line'><span class="p">{</span><span class="mi">1</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">:</span> <span class="mi">9</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

You could expect that using parentheses instead of curly or square brackets in comprehensions will generate a tuple:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">lower</span> <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">strings</span> <span class="k">if</span> <span class="n">s</span> <span class="o">!=</span> <span class="s">&quot;foo&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

Despite the fact that this resembles the list comprehension it will create an iterator. Such an expression is called "generator" in Python. Generators is a more advanced Python concept and you can read about them [here](/2015/09/21/generators-in-python/).


# Imports

Soon after you start programming in Python you will need to use someone else code.

The process of using a third-party code in your program is called importing. This tutorial assumes that you have already installed a third-party code that you are going to use and it's visible to your Python interpreter. To read more about how to do it read this [introduction](/2016/03/27/introduction-to-python/) to Python.

The basic block of code reuse in Python is a module. Put simply, a module is a file where a developer can define types, constants, and functions. For example, let's assume that someone wrote a module with a two functions and you want to use it in your program:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># my_module.py</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">filter_odd</span><span class="p">(</span><span class="n">lst</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span><span class="n">num</span> <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">lst</span> <span class="k">if</span> <span class="n">num</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">filter_even</span><span class="p">(</span><span class="n">lst</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span><span class="n">num</span> <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">lst</span> <span class="k">if</span> <span class="n">num</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>

There are two ways we can use functions defined in it. The first one is to import the whole module into out code using the **import** statement. In this case, we can access items from a module using construction **my_module.filter_even**:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">my_module</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">my_module</span><span class="o">.</span><span class="n">filter_even</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">])</span>
</span><span class='line'><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>

Sometimes writing a module name and a function name may be cumbersome and it's better to write just a function name. To do this we can import just a single function from a module using **from my_module import filter_even**:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">my_module</span> <span class="kn">import</span> <span class="n">filter_even</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">filter_even</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">])</span>
</span><span class='line'><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>

It's possible to import multiple functions from a module:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">my_module</span> <span class="kn">import</span> <span class="n">filter_even</span><span class="p">,</span> <span class="n">filter_odd</span>
</span></code></pre></td></tr></table></div></figure>

Or to import all functions defined in it:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">my_module</span> <span class="kn">import</span> <span class="o">*</span>
</span></code></pre></td></tr></table></div></figure>

Both methods will make functions **filter_odd** or **filter_even** available in our code:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">filter_odd</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">])</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">filter_even</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">])</span>
</span><span class='line'><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>

To organize multiple modules they can be placed in packages or simply hierarchical directories:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">.</span>
</span><span class='line'><span class="err">└──</span> <span class="n">package_1</span>
</span><span class='line'>    <span class="err">├──</span> <span class="n">__init__</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'>    <span class="err">├──</span> <span class="n">package_2</span>
</span><span class='line'>    <span class="err">│  </span> <span class="err">├──</span> <span class="n">__init__</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'>    <span class="err">│  </span> <span class="err">└──</span> <span class="n">my_module</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'>    <span class="err">└──</span> <span class="n">package_3</span>
</span><span class='line'>        <span class="err">└──</span> <span class="n">__init__</span><span class="o">.</span><span class="n">py</span>
</span></code></pre></td></tr></table></div></figure>

Importing modules in packages is not much different from importing a single module. Just import a module from a particular package:


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">package_1.package_2</span> <span class="kn">import</span> <span class="n">my_module</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">module</span><span class="o">.</span><span class="n">filter_odd</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">])</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>

As with the regular module import you can import separate function:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">package_1.package_2.my_module</span> <span class="kn">import</span> <span class="n">filter_odd</span><span class="p">,</span> <span class="n">filter_even</span>
</span></code></pre></td></tr></table></div></figure>

Not every directory is considered to be a package by Python. Every package should contain **__init__.py** file in order for Python interpreter to see it as a package. This file is usually empty and is serves only as a marker.

# Classes

As in many other programming languages, classes in Python is a way to combine code and data together to facilitate code reuse. As an exercise let's define a class for a user that will have name, surname as fields and will have a method to generate a full name:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>	<span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">surname</span><span class="p">):</span>
</span><span class='line'>		<span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
</span><span class='line'>		<span class="bp">self</span><span class="o">.</span><span class="n">surname</span> <span class="o">=</span> <span class="n">surname</span>
</span><span class='line'>
</span><span class='line'>	<span class="k">def</span> <span class="nf">get_full_name</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>		<span class="n">res</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>		<span class="n">res</span> <span class="o">+=</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>		<span class="n">res</span> <span class="o">+=</span> <span class="s">&quot; &quot;</span>
</span><span class='line'>		<span class="n">res</span> <span class="o">+=</span> <span class="bp">self</span><span class="o">.</span><span class="n">surname</span>
</span><span class='line'>		<span class="k">return</span> <span class="n">res</span>
</span></code></pre></td></tr></table></div></figure>

Now we can use this class:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">p</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="s">&quot;John&quot;</span><span class="p">,</span> <span class="s">&quot;Doe&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">p</span><span class="o">.</span><span class="n">get_full_name</span><span class="p">()</span>
</span><span class='line'><span class="s">&#39;John Doe&#39;</span>
</span></code></pre></td></tr></table></div></figure>

There is a lot going on in this simple class definition, so let's go through this line by line.

In the first line we define a type **Person** and inherit it from **object** type:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>  <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>

Inheriting from the **object** type looks awkward, but it's a way that was introduced in Python 2 to use so-called **new-style** classes. If you simply write:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Person</span><span class="p">:</span>
</span><span class='line'>  <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>

you will define a class, but this will be a so-called **old-style** class. New-style classes were introduced in Python 2.2 to unify type system. It's worth noting that Python 3 does not have this separation and only have new-style classes that can be created with a simpler version of this syntax:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Person</span><span class="p">:</span>
</span><span class='line'>  <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>

The second line defines a constructor of our class:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">surname</span><span class="p">):</span>
</span><span class='line'>    <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>

The first argument is an analog of a **this** reference in other programming languages and should be explicitly be added as the first argument in every method. After the  **self** argument we need to define a list of arguments to a class constructor that we pass when we create an instance of this class, e.g.:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">p</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="s">&quot;John&quot;</span><span class="p">,</span> <span class="s">&quot;Doe&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

Except the fact that constructor should not return a value, it is similar to any other function. You can use named arguments and default values as described [here](/2016/03/28/python-in-one-hour-part-1/).

If a constructor is not defined or have no arguments except **self** you can create an instance without passing any values to it:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>  <span class="c"># no constructor</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="n">p</span> <span class="o">=</span> <span class="n">Person</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>

Notice that **\_\_init\_\_** name is surrounded with two **_** symbols. This is a naming format for so-called **magic methods** such as **\_\_eq\_\_** (define objects equality), **\_\_str\_\_** (to define object's string representation) and many [others](http://www.rafekettler.com/magicmethods.html).

In a constructor we can initialize an instance and assign values to it's fields:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">surname</span><span class="p">):</span>
</span><span class='line'>    <span class="c"># Initialize &quot;name&quot; field</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
</span><span class='line'>    <span class="c"># Initialize  &quot;surname&quot; field</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">surname</span> <span class="o">=</span> <span class="n">surname</span>
</span></code></pre></td></tr></table></div></figure>

After a constructor, we defined a single method of our class. It's written as a usual function except the first **self** argument that will be used to access fields of an instance:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_full_name</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>	<span class="n">res</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>	<span class="n">res</span> <span class="o">+=</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>	<span class="n">res</span> <span class="o">+=</span> <span class="s">&quot; &quot;</span>
</span><span class='line'>	<span class="n">res</span> <span class="o">+=</span> <span class="bp">self</span><span class="o">.</span><span class="n">surname</span>
</span><span class='line'>	<span class="k">return</span> <span class="n">res</span>
</span></code></pre></td></tr></table></div></figure>

Note that all fields defined in a constructor of a class are public and can be changed outside of methods:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">p</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="s">&quot;John&quot;</span><span class="p">,</span> <span class="s">&quot;Doe&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">p</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;Foo&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">p</span><span class="o">.</span><span class="n">surname</span> <span class="o">=</span> <span class="s">&quot;Bar&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">p</span><span class="o">.</span><span class="n">get_full_name</span><span class="p">()</span>
</span><span class='line'><span class="s">&#39;Foo Bar&#39;</span>
</span></code></pre></td></tr></table></div></figure>

Common naming convention is to prepend a name of a "private" field with an underscore symbol:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>	<span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">surname</span><span class="p">):</span>
</span><span class='line'>		<span class="bp">self</span><span class="o">.</span><span class="n">_name</span> <span class="o">=</span> <span class="n">name</span>
</span><span class='line'>		<span class="bp">self</span><span class="o">.</span><span class="n">_surname</span> <span class="o">=</span> <span class="n">surname</span>
</span><span class='line'>
</span><span class='line'>	<span class="k">def</span> <span class="nf">get_full_name</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>		<span class="n">res</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>		<span class="n">res</span> <span class="o">+=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_name</span>
</span><span class='line'>		<span class="n">res</span> <span class="o">+=</span> <span class="s">&quot; &quot;</span>
</span><span class='line'>		<span class="n">res</span> <span class="o">+=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_surname</span>
</span><span class='line'>		<span class="k">return</span> <span class="n">res</span>
</span></code></pre></td></tr></table></div></figure>

This won't stop a user of your class from changing a value of a "private" field, but it will be much more visible:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">p</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="s">&quot;John&quot;</span><span class="p">,</span> <span class="s">&quot;Doe&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">p</span><span class="o">.</span><span class="n">_name</span> <span class="o">=</span> <span class="s">&quot;John&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">p</span><span class="o">.</span><span class="n">get_full_name</span><span class="p">()</span>
</span><span class='line'><span class="s">&#39;John Doe&#39;</span>
</span></code></pre></td></tr></table></div></figure>

# Inheritance

Let's extend the previous example and create a sub-class **Employee** that will have same fields as the **Person** class with an additional **salary** field:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Employee</span><span class="p">(</span><span class="n">Person</span><span class="p">):</span>
</span><span class='line'>	<span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">surname</span><span class="p">,</span> <span class="n">salary</span><span class="p">):</span>
</span><span class='line'>		<span class="nb">super</span><span class="p">(</span><span class="n">Person</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">surname</span><span class="p">)</span>
</span><span class='line'>		<span class="bp">self</span><span class="o">.</span><span class="n">salary</span> <span class="o">=</span> <span class="n">salary</span>
</span></code></pre></td></tr></table></div></figure>

The new class will have fields and methods from both classes:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">Employee</span><span class="p">(</span><span class="s">&quot;John&quot;</span><span class="p">,</span> <span class="s">&quot;Doe&quot;</span><span class="p">,</span> <span class="mi">10000</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">e</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'><span class="s">&#39;John&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">e</span><span class="o">.</span><span class="n">surname</span>
</span><span class='line'><span class="s">&#39;Doe&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">e</span><span class="o">.</span><span class="n">salary</span>
</span><span class='line'><span class="mi">10000</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">e</span><span class="o">.</span><span class="n">get_full_name</span><span class="p">()</span>
</span><span class='line'><span class="s">&#39;John Doe&#39;</span>
</span></code></pre></td></tr></table></div></figure>

The only new element that is used in the definition of the **Employee** class is the **super** function:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nb">super</span><span class="p">(</span><span class="n">Person</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">surname</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

It is used to call a constructor from a super class. **super(Person, self).\_\_init\_\_** returns a reference to a method from a superclass.


## Python 3

In Python 3 calling a method of a superclass was changed and now it looks much simpler:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Employee</span><span class="p">(</span><span class="n">Person</span><span class="p">):</span>
</span><span class='line'>	<span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">surname</span><span class="p">,</span> <span class="n">salary</span><span class="p">):</span>
</span><span class='line'>		<span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">surname</span><span class="p">)</span>
</span><span class='line'>		<span class="bp">self</span><span class="o">.</span><span class="n">salary</span> <span class="o">=</span> <span class="n">salary</span>
</span></code></pre></td></tr></table></div></figure>

# Exceptions

To throw an exception in Python use the **raise** keyword followed by an instance of an exception to raise:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&quot;terrible thing has just happened&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;pyshell#106&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&quot;terrible thing has just happened&quot;</span><span class="p">)</span>
</span><span class='line'><span class="ne">Exception</span><span class="p">:</span> <span class="n">terrible</span> <span class="n">thing</span> <span class="n">has</span> <span class="n">just</span> <span class="n">happened</span>
</span></code></pre></td></tr></table></div></figure>

To catch an exception Python provides a **try/except** block that is slightly different than in other languages:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">f</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'> <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;filename&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'> <span class="k">print</span> <span class="n">e</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'> <span class="k">print</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'><span class="k">finally</span><span class="p">:</span>
</span><span class='line'> <span class="k">if</span> <span class="n">f</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>   <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>

**try** and **except** blocks similar to their analogs in many other programming languages. **try** block contains code that may raise an exception while **except** block contains code that will be executed if an exception was raised.

If we need to process different exceptions in a different way we can have multiple **except** blocks:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">except</span> <span class="ne">IOError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'> <span class="k">print</span> <span class="s">&quot;IOError&quot;</span>
</span><span class='line'><span class="k">except</span> <span class="ne">ValueError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'> <span class="k">print</span> <span class="s">&quot;ValueError&quot;</span>
</span><span class='line'><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'> <span class="k">print</span> <span class="s">&quot;IOError&quot;</span>
</span></code></pre></td></tr></table></div></figure>

Keep in mind that if an exception is raised except blocks are tried sequentially top to bottom. If an exception's type matches one of them it's executed and rest **except** blocks are ignored. This means that in the following case last two **except** block will never be executed:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'> <span class="k">print</span> <span class="s">&quot;Exception&quot;</span>
</span><span class='line'><span class="k">except</span> <span class="ne">IOError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'> <span class="k">print</span> <span class="s">&quot;IOError&quot;</span>
</span><span class='line'><span class="k">except</span> <span class="ne">ValueError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'> <span class="k">print</span> <span class="s">&quot;ValueError&quot;</span>
</span></code></pre></td></tr></table></div></figure>

**else** block in the try/except is only executed if an exception was not raised in the **try** block. It is executed before the **finally** block and is used to separate code that can raise an exception from code that should not raise any. If an exception is raised in the **else** block it is not going to be processed by any of the **except** blocks.

The **finally** block will be executed in any case no matter if an exception was raised. It is used to close any resources that are used in **try** or **else** blocks.

If you do not need to access an instance of a caught exception you can ignore it by writing the **except** clause like:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">except</span> <span class="ne">Exception</span><span class="p">:</span>
</span></code></pre></td></tr></table></div></figure>

Python has a number of built-in exception types defined, here is a [list](https://docs.python.org/2/library/exceptions.html) of them.

An exception constructor can accept any number of arguments, but most of the built-in exceptions can be created by passing just an error message or no arguments at all:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">&quot;Didn&#39;t pass verification&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;pyshell#112&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">&quot;Didn&#39;t pass verification&quot;</span><span class="p">)</span>
</span><span class='line'><span class="ne">ValueError</span><span class="p">:</span> <span class="n">Didn</span><span class="s">&#39;t pass verification</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">raise</span> <span class="ne">TypeError</span><span class="p">(</span><span class="s">&quot;Nope&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;pyshell#113&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">raise</span> <span class="ne">TypeError</span><span class="p">(</span><span class="s">&quot;Nope&quot;</span><span class="p">)</span>
</span><span class='line'><span class="ne">TypeError</span><span class="p">:</span> <span class="n">Nope</span>
</span></code></pre></td></tr></table></div></figure>

## Python 3

Python 2 also supports an alternative syntax for raising exception:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">raise</span> <span class="ne">Exception</span><span class="p">,</span> <span class="s">&quot;error message&quot;</span>
</span></code></pre></td></tr></table></div></figure>

And catching exceptions:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">except</span> <span class="ne">Exception</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'>  <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>

Both were removed in Python 3.

# Properties

Many classes end up with having some methods for accessing and changing its state called "getters" and "setters". Python provides a special mechanism for writing getters and setters called "properties". Let's rewrite class from one of the previous sections using properties:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>  <span class="c"># Same constructor as before</span>
</span><span class='line'>	<span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">surname</span><span class="p">):</span>
</span><span class='line'>		<span class="bp">self</span><span class="o">.</span><span class="n">_name</span> <span class="o">=</span> <span class="n">name</span>
</span><span class='line'>		<span class="bp">self</span><span class="o">.</span><span class="n">_surname</span> <span class="o">=</span> <span class="n">surname</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># getter for &quot;name&quot; field  </span>
</span><span class='line'>	<span class="nd">@property</span>
</span><span class='line'>	<span class="k">def</span> <span class="nf">name</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>		<span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_name</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># setter for &quot;name&quot; field</span>
</span><span class='line'>	<span class="nd">@name.setter</span>
</span><span class='line'>	<span class="k">def</span> <span class="nf">name</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">new_name</span><span class="p">):</span>
</span><span class='line'>		<span class="k">if</span> <span class="n">new_name</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>			<span class="k">raise</span> <span class="ne">ValueError</span><span class="p">()</span>
</span><span class='line'>		<span class="bp">self</span><span class="o">.</span><span class="n">_name</span> <span class="o">=</span> <span class="n">new_name</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># getter for &quot;surname&quot; field  </span>
</span><span class='line'>	<span class="nd">@property</span>
</span><span class='line'>	<span class="k">def</span> <span class="nf">surname</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>		<span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_surname</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># setter for &quot;surname&quot; field  </span>
</span><span class='line'>	<span class="nd">@surname.setter</span>
</span><span class='line'>	<span class="k">def</span> <span class="nf">surname</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">new_surname</span><span class="p">):</span>
</span><span class='line'>		<span class="k">if</span> <span class="n">new_surname</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>			<span class="k">raise</span> <span class="ne">ValueError</span><span class="p">()</span>
</span><span class='line'>		<span class="bp">self</span><span class="o">.</span><span class="n">_surname</span> <span class="o">=</span> <span class="n">new_surname</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># getter for &quot;full_name&quot; that is not based on a single field</span>
</span><span class='line'>	<span class="nd">@property</span>
</span><span class='line'>	<span class="k">def</span> <span class="nf">full_name</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>		<span class="n">res</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>		<span class="n">res</span> <span class="o">+=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_name</span>
</span><span class='line'>		<span class="n">res</span> <span class="o">+=</span> <span class="s">&quot; &quot;</span>
</span><span class='line'>		<span class="n">res</span> <span class="o">+=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_surname</span>
</span><span class='line'>		<span class="k">return</span> <span class="n">res</span>
</span></code></pre></td></tr></table></div></figure>

Now we can use this class bit differently:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">p</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="s">&#39;John&#39;</span><span class="p">,</span> <span class="s">&#39;Doe&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">p</span><span class="o">.</span><span class="n">full_name</span>
</span><span class='line'><span class="s">&#39;John Doe&#39;</span>
</span><span class='line'><span class="c"># Use setters for the fields</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">p</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#39;Foo&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">p</span><span class="o">.</span><span class="n">surname</span> <span class="o">=</span> <span class="s">&#39;Bar&#39;</span>
</span><span class='line'><span class="c"># Use getters for the fields</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">p</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'><span class="s">&#39;Foo&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">p</span><span class="o">.</span><span class="n">surname</span>
</span><span class='line'><span class="s">&#39;Bar&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">p</span><span class="o">.</span><span class="n">full_name</span>
</span><span class='line'><span class="s">&#39;Foo Bar&#39;</span>
</span></code></pre></td></tr></table></div></figure>

Let's go through the main new elements in this code. The first few lines define a constructor just as in the original example. The next function defines a getter method for the **name** field:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@property</span>
</span><span class='line'><span class="k">def</span> <span class="nf">name</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>	<span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_name</span>
</span></code></pre></td></tr></table></div></figure>

Apart from the **@property** (it's called decorator in Python), this is a regular function. The only difference that to trigger it we do not need to write parentheses to trigger it:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">p</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="s">&#39;John&#39;</span><span class="p">,</span> <span class="s">&#39;Doe&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">p</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'><span class="s">&#39;John&#39;</span>
</span></code></pre></td></tr></table></div></figure>

The name of the function is very important here because it defines the name of the property.

The next few lines define a setter method:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@name.setter</span>
</span><span class='line'><span class="k">def</span> <span class="nf">name</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">new_name</span><span class="p">):</span>
</span><span class='line'>	<span class="k">if</span> <span class="n">new_name</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>		<span class="k">raise</span> <span class="ne">ValueError</span><span class="p">()</span>
</span><span class='line'>	<span class="bp">self</span><span class="o">.</span><span class="n">_name</span> <span class="o">=</span> <span class="n">new_name</span>
</span></code></pre></td></tr></table></div></figure>

To make this method a property it should start with **@<property_name>.setter**. The name of the method should be the same as the name of the property. This function should not return anything and only change the internal state of an object.

The next few lines define the **surname** property and they are not much different from the **name** property.

The last function in the class defines the **full_name**. The only thing that is interesting about it is that it's not based on a single field, but rather generates a value using multiple fields from an object:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@property</span>
</span><span class='line'><span class="k">def</span> <span class="nf">full_name</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>	<span class="n">res</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>	<span class="n">res</span> <span class="o">+=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_name</span>
</span><span class='line'>	<span class="n">res</span> <span class="o">+=</span> <span class="s">&quot; &quot;</span>
</span><span class='line'>	<span class="n">res</span> <span class="o">+=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_surname</span>
</span><span class='line'>	<span class="k">return</span> <span class="n">res</span>
</span></code></pre></td></tr></table></div></figure>

Note that since we didn't define a setter for the **full_name** property we cannot assign values to it:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">p</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="s">&#39;John&#39;</span><span class="p">,</span> <span class="s">&#39;Doe&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">p</span><span class="o">.</span><span class="n">full_name</span> <span class="o">=</span> <span class="s">&#39;abc&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;pyshell#104&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="n">p</span><span class="o">.</span><span class="n">full_name</span> <span class="o">=</span> <span class="s">&#39;abc&#39;</span>
</span><span class='line'><span class="ne">AttributeError</span><span class="p">:</span> <span class="n">can</span><span class="s">&#39;t set attribute</span>
</span></code></pre></td></tr></table></div></figure>

# Context manager

To ensure that all acquired resources are released one can use **try**/**finally** blocks like this:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">f</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;/etc/passwd&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'><span class="k">finally</span><span class="p">:</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">f</span> <span class="o">!=</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>    <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>

Similar code should be written if we need to interact with locks:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">threading</span>
</span><span class='line'><span class="n">lock</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Lock</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>	<span class="n">lock</span><span class="o">.</span><span class="n">acquire</span><span class="p">()</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;foo&quot;</span>
</span><span class='line'><span class="k">finally</span><span class="p">:</span>
</span><span class='line'>	<span class="n">lock</span><span class="o">.</span><span class="n">release</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>

Fortunately, Python provides a better mechanism for that. The **with** keyword was introduced in Python 2.5 that helps to rewrite the previous example using just two lines of code:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">with</span> <span class="n">lock</span><span class="p">:</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;foo&quot;</span>
</span></code></pre></td></tr></table></div></figure>

It encapsulates code for acquiring and releasing the resource and lets us concentrate on the business logic instead. In terms of implementation, context managers boil down to calling special methods **\_\_enter\_\_** and **\_\_exit\_\_** on an object before and after a code in a **with** block.

For some objects, you need to use a special function that will allow using an object with a context manager. To work with files using a context managers we need to use **closing** from the **contextlib**:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">contextlib</span> <span class="kn">import</span> <span class="n">closing</span>
</span><span class='line'><span class="k">with</span> <span class="n">closing</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="s">&#39;/etc/passwd&#39;</span><span class="p">))</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>	<span class="k">print</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>

This function can be used with all objects that control resources and have **close** method that is used to release a resource.

## Conclusion

At this point, you should know basics of Python that should allow you to read and write quite sophisticated programs.

If you want to learn more about Python, you can read following articles:

[Anatomy of Python Iterator](/2015/09/07/anatomy-of-python-iterator/)
[Generators in Python](/2015/09/21/generators-in-python/)
[Python data structures idioms](/2015/12/21/python-data-structures-idioms/)

Do not hesitate to write a comment if you have any questions about this article and share it if you like it.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python in One Hour. Part 1]]></title>
    <link href="http://mushketyk.com/2016/03/28/python-in-one-hour-part-1/"/>
    <updated>2016-03-28T20:09:40+01:00</updated>
    <id>http://mushketyk.com/2016/03/28/python-in-one-hour-part-1</id>
    <content type="html"><![CDATA[This is a relatively short and concise article that will give you all that you need to know to start reading/writing Python code. It will start with defining a variable and will discuss types, data structures, if-else statements, loops, and functions.

This tutorial does not require any prior knowledge of Python. The only prerequisite for this article is knowledge of basics of any other object-oriented programming language.

Most of the examples in this article are applicable in both Python 2 and Python 3. I point to differences between Python versions where applicable.

<!--more-->

If you want to know how to set up Python please read this [introduction post](/2016/03/27/introduction-to-python/).

# How to follow the examples

To follow examples from this article you can type them in an interactive Python shell. A definite benefit of this approach is that it outputs the result values of every executed expression.

If you want to write a Python script you will need to explicitly output values you are interested in. To do it simply use the **print** operator followed by a value to print:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="s">&quot;Hello, world!&quot;</span>
</span><span class='line'><span class="n">Hello</span><span class="p">,</span> <span class="n">world</span><span class="err">!</span>
</span></code></pre></td></tr></table></div></figure>

Notice that there is no need for a semicolon after a statement. Adding a semicolon would not change the outcome of a statement, but is discouraged.

Comments are started with **#** symbol and are ignored by both interpeter and interactive shells:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># comment</span>
</span></code></pre></td></tr></table></div></figure>

## Python 3

In Python 3 operator **print** was removed and was replaced with **print** function. So "Hello world" example will look like this:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="s">&quot;Hello, world!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">Hello</span><span class="p">,</span> <span class="n">world</span><span class="err">!</span>
</span></code></pre></td></tr></table></div></figure>

# Variables

To define a variable in Python just write **var_name = value**:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">foo</span> <span class="o">=</span> <span class="mi">123</span>
</span></code></pre></td></tr></table></div></figure>

Python is a dynamic programming language, so there is no restriction on types of values that can be assigned to a particular variable:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">foo</span> <span class="o">=</span> <span class="mi">123</span>
</span><span class='line'><span class="n">foo</span> <span class="o">=</span> <span class="s">&quot;Hello, world!&quot;</span>
</span></code></pre></td></tr></table></div></figure>

Python supports all usual basic types that can be found in other programming languages:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="mi">123</span>     <span class="c"># integer</span>
</span><span class='line'><span class="il">123L</span>    <span class="c"># long</span>
</span><span class='line'><span class="mf">123.45</span>  <span class="c"># float</span>
</span><span class='line'><span class="s">&quot;str&quot;</span>   <span class="c"># string</span>
</span><span class='line'><span class="bp">True</span>    <span class="c"># boolean</span>
</span><span class='line'><span class="bp">False</span>   <span class="c"># boolean</span>
</span><span class='line'><span class="bp">None</span>    <span class="c"># NoneType analog of null in other languages</span>
</span></code></pre></td></tr></table></div></figure>

In addition to that Python supports [complex numbers](https://en.wikipedia.org/wiki/Complex_number) that have real and imaginary part:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="mi">1</span> <span class="o">+</span> <span class="mi">1j</span>  <span class="c"># complex number</span>
</span><span class='line'><span class="mi">2j</span>      <span class="c"># just imaginary part</span>
</span></code></pre></td></tr></table></div></figure>

As can be expected Python supports all common mathematical operators:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span>         <span class="c"># sum</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">2</span> <span class="o">-</span> <span class="mi">1</span>         <span class="c"># difference</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="o">-</span><span class="mi">1</span>            <span class="c"># negated value</span>
</span><span class='line'><span class="o">-</span><span class="mi">1</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="o">+</span><span class="mi">1</span>            <span class="c"># unchanged value</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">3</span> <span class="o">*</span> <span class="mi">4</span>         <span class="c"># product</span>
</span><span class='line'><span class="mi">12</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">4</span> <span class="o">/</span> <span class="mi">3</span>         <span class="c"># quotient</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">5</span> <span class="o">%</span> <span class="mi">3</span>         <span class="c"># reminder of</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">abs</span><span class="p">(</span><span class="o">-</span><span class="mi">3</span><span class="p">)</span>       <span class="c"># absolute value</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">int</span><span class="p">(</span><span class="mf">3.5</span><span class="p">)</span>      <span class="c"># convert to integer</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">long</span><span class="p">(</span><span class="mf">3.5</span><span class="p">)</span>     <span class="c"># convert to long</span>
</span><span class='line'><span class="il">3L</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">float</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>      <span class="c"># convert to float</span>
</span><span class='line'><span class="mf">1.0</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">complex</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>  <span class="c"># create complex number</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="mi">2j</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>     <span class="c"># to the power of</span>
</span><span class='line'><span class="mi">16</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">2</span> <span class="o">**</span> <span class="mi">4</span>        <span class="c"># to the power of</span>
</span><span class='line'><span class="mi">16</span>
</span></code></pre></td></tr></table></div></figure>

... as well as bitwise operators for integers and longs:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">1</span> <span class="o">&amp;</span> <span class="mi">2</span>     <span class="c"># bitwise and</span>
</span><span class='line'><span class="mi">0</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">1</span> <span class="o">|</span> <span class="mi">2</span>     <span class="c"># bitwise or</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">3</span> <span class="o">^</span> <span class="mi">1</span>     <span class="c"># bitwise xor</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">2</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span>    <span class="c"># shift left</span>
</span><span class='line'><span class="mi">4</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">2</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span>    <span class="c"># shift right</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="o">~</span><span class="mi">2</span>        <span class="c"># invert bits</span>
</span><span class='line'><span class="o">-</span><span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>

As many other imperative programming languages Python supports shortcuts for reassigning variables:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">a</span> <span class="o">+=</span> <span class="n">b</span> <span class="c"># a = a + b</span>
</span><span class='line'><span class="n">a</span> <span class="o">-=</span> <span class="n">b</span> <span class="c"># a = a - b</span>
</span><span class='line'><span class="n">a</span> <span class="o">*=</span> <span class="n">b</span> <span class="c"># a = a * b</span>
</span><span class='line'><span class="n">a</span> <span class="o">/=</span> <span class="n">b</span> <span class="c"># a = a / b</span>
</span><span class='line'><span class="n">a</span> <span class="o">%=</span> <span class="n">b</span> <span class="c"># a = a % b</span>
</span><span class='line'><span class="n">a</span> <span class="o">**=</span> <span class="n">b</span> <span class="c"># a = a ** b</span>
</span><span class='line'><span class="n">a</span> <span class="o">//=</span> <span class="n">b</span> <span class="c"># a = a // b</span>
</span></code></pre></td></tr></table></div></figure>

In Python it's possible to assign values to several variables in one line:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">b</span>
</span><span class='line'><span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>

Which is used in a common Python one-liner for swapping values of two variables:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">b</span><span class="p">,</span> <span class="n">a</span>
</span></code></pre></td></tr></table></div></figure>

## Python 3

In Python 3 the behavior of the **/** operator is different comparing to Python 3. Instead of performing an integer division it performs a floating point division:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Python 2</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">4</span><span class="o">/</span><span class="mi">3</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Python 3</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">4</span> <span class="o">/</span> <span class="mi">3</span>
</span><span class='line'><span class="mf">1.3333333333333333</span>
</span></code></pre></td></tr></table></div></figure>

# Strings

Strings can be defined either with double quotes or with single quotes to avoid excessive usage of escape characters:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="s">&quot;hello &#39;username&#39;&quot;</span>
</span><span class='line'><span class="s">&#39;hello &quot;username&quot;&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># intead of</span>
</span><span class='line'><span class="s">&quot;hello </span><span class="se">\&quot;</span><span class="s">username</span><span class="se">\&quot;</span><span class="s">&quot;</span>
</span><span class='line'><span class="c"># or</span>
</span><span class='line'><span class="s">&#39;hello </span><span class="se">\&#39;</span><span class="s">username</span><span class="se">\&#39;</span><span class="s">&#39;</span>
</span></code></pre></td></tr></table></div></figure>

Additionally, Python supports multi-line strings that can be defined with either three double quotes characters or with three single quote characters:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&quot;&quot;&quot;line1</span>
</span><span class='line'><span class="s">line2</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span>
</span><span class='line'><span class="s">&#39;line1</span><span class="se">\n</span><span class="s">line2</span><span class="se">\n</span><span class="s">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&#39;&#39;&#39;line1</span>
</span><span class='line'><span class="s">line2</span>
</span><span class='line'><span class="s">&#39;&#39;&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span>
</span><span class='line'><span class="s">&#39;line1</span><span class="se">\n</span><span class="s">line2</span><span class="se">\n</span><span class="s">&#39;</span>
</span></code></pre></td></tr></table></div></figure>

The **len** function can be used to get a length of a string:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">len</span><span class="p">(</span><span class="s">&#39;string&#39;</span><span class="p">)</span>
</span><span class='line'><span class="mi">6</span>
</span></code></pre></td></tr></table></div></figure>

To get an n-th character from a string you can use [] operator:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&#39;string&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;t&#39;</span>
</span></code></pre></td></tr></table></div></figure>

[] operator is more versatile than in other languages. For instance, if you pass a negative number to a [] operator you will receive n-th element from the end of the string:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;g&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;n&#39;</span>
</span></code></pre></td></tr></table></div></figure>

But this is just the beginning. The second version of the [] operator allows you to get a substring by providing two values separated by a column: start index and stop index (not inclusive).

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;str&#39;</span>
</span></code></pre></td></tr></table></div></figure>

Second index can be a negative number. For example to remove last character of from a string we can write:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&#39;string&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;strin&#39;</span>
</span></code></pre></td></tr></table></div></figure>

The third and less used version of the [] operator lets you provide three parameters: start index, stop index, and a step:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">):</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;string&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">):</span><span class="mi">2</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;srn&#39;</span>
</span></code></pre></td></tr></table></div></figure>

To check if a string contains a substring you can use **in** operator or **not in** operator:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&#39;string&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="s">&#39;tri&#39;</span> <span class="ow">in</span> <span class="n">s</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="s">&#39;aaa&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">s</span>
</span><span class='line'><span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>

Strings are immutable so every function that performs any changes to a string will create a new string instance. Here are few methods that can use to change a string:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="s">&#39;   aaa&#39;</span><span class="o">.</span><span class="n">lstrip</span><span class="p">()</span>
</span><span class='line'><span class="s">&#39;aaa&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="s">&#39;aaa    &#39;</span><span class="o">.</span><span class="n">rstrip</span><span class="p">()</span>
</span><span class='line'><span class="s">&#39;aaa&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="s">&#39;   aaa   &#39;</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'><span class="s">&#39;aaa&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="s">&#39;Hello&#39;</span><span class="o">.</span><span class="n">swapcase</span><span class="p">()</span>
</span><span class='line'><span class="s">&#39;hELLO&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="s">&#39;Hello&#39;</span><span class="o">.</span><span class="n">upper</span><span class="p">()</span>
</span><span class='line'><span class="s">&#39;HELLO&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="s">&#39;Hello&#39;</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span>
</span><span class='line'><span class="s">&#39;hello&#39;</span>
</span></code></pre></td></tr></table></div></figure>

Notice that all of them return a new value instead of changing a string in-place.

**+** or **+=** operators are used to concatenate strings:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&quot;Hello,&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="n">s</span> <span class="o">+</span> <span class="s">&quot; John&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span> <span class="o">+=</span> <span class="s">&quot; Doe&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span>
</span><span class='line'><span class="s">&#39;Hello, John Doe&#39;</span>
</span></code></pre></td></tr></table></div></figure>

# Data structures

Python has 4 basic built-in data structures: list, tuple, dictionary and set

## list

List in Python is a dynamic array. You can create a list with a short and concise syntax by simply listing all elements of a list in square brackets separated by commas:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span> <span class="c"># list with three elements</span>
</span><span class='line'><span class="p">[]</span> <span class="c"># empty List</span>
</span><span class='line'><span class="nb">list</span><span class="p">()</span> <span class="c"># same as []</span>
</span></code></pre></td></tr></table></div></figure>

Lists in Python are not restricted to elements of the same type and can contain values of different types:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mf">3.0</span><span class="p">,</span> <span class="bp">True</span><span class="p">,</span> <span class="s">&quot;string&quot;</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]]</span>
</span></code></pre></td></tr></table></div></figure>

To get an element of a list one need to use [] operator:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">l</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">l</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
</span><span class='line'><span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>

List supports the same forms of [] operator as string does:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">l</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">l</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">2</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">l</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">5</span><span class="p">:</span><span class="mi">2</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>

If an item of list's range is accessed an IndexError exception will be raised:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">l</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;pyshell#43&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="n">l</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span>
</span><span class='line'><span class="ne">IndexError</span><span class="p">:</span> <span class="nb">list</span> <span class="n">index</span> <span class="n">out</span> <span class="n">of</span> <span class="nb">range</span>
</span></code></pre></td></tr></table></div></figure>

To add an element to the end of the list one can use **append** function or **extend** function to add multiple elements:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">l</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">l</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">l</span><span class="o">.</span><span class="n">extend</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">])</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">l</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>

To change an element in a list one need just to assign a value to an n-th element:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">l</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="mi">5</span>
</span></code></pre></td></tr></table></div></figure>

Notice that you can use only the basic version of the [] operator for assignment. For example, it's not allowed to assign value to a range of elements:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">l</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class='line'>
</span><span class='line'><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;pyshell#10&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="n">l</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class='line'><span class="ne">TypeError</span><span class="p">:</span> <span class="n">can</span> <span class="n">only</span> <span class="n">assign</span> <span class="n">an</span> <span class="n">iterable</span>
</span></code></pre></td></tr></table></div></figure>

As with the string the **len** function is used to get length of a list:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nb">len</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>

Another thing to keep in mind that when that list is not copied during an assignment. Every variable contains a reference to a list:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">b</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">b</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>

To copy a list (as well as any other built-in data structure) you need to use the **copy** module:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">copy</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">b</span> <span class="o">=</span> <span class="n">copy</span><span class="o">.</span><span class="n">copy</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="c"># Shallow copy</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">c</span> <span class="o">=</span> <span class="n">copy</span><span class="o">.</span><span class="n">deepcopy</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="c"># Deep copy</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Will not change the original list</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">b</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
</span><span class='line'><span class="c"># Will change the original list</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">b</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Will not change the original list</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">c</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">]]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">b</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">],</span> <span class="mi">6</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">c</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">9</span><span class="p">],</span> <span class="mi">8</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>

## tuple

Tuples are similar to lists, with the difference that tuples are immutable and cannot be changed after creation. They are created similarly to lists but with parentheses instead of square brackets:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">t</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">t</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">t</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
</span><span class='line'><span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>

Changing elements of a tuple is not allowed:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">t</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mi">123</span>
</span><span class='line'>
</span><span class='line'><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;pyshell#55&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="n">t</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mi">123</span>
</span><span class='line'><span class="ne">TypeError</span><span class="p">:</span> <span class="s">&#39;tuple&#39;</span> <span class="nb">object</span> <span class="n">does</span> <span class="ow">not</span> <span class="n">support</span> <span class="n">item</span> <span class="n">assignment</span>
</span></code></pre></td></tr></table></div></figure>

typles syntax is a bit tricky when it comes to creating an empty set or a set with just one element:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">empty</span> <span class="o">=</span> <span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">single</span> <span class="o">=</span> <span class="mi">123</span><span class="p">,</span> <span class="c"># note the coma at the end</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">single2</span> <span class="o">=</span> <span class="p">(</span><span class="mi">123</span><span class="p">,)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">empty</span><span class="p">)</span>
</span><span class='line'><span class="mi">0</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">single</span><span class="p">)</span>
</span><span class='line'><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>

Note that simple surrounding a single element with parenthesises is not sufficient to create a tuple:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">v</span> <span class="o">=</span> <span class="p">(</span><span class="mi">123</span><span class="p">)</span> <span class="c"># need a come to make it a tuple</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">type</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;int&#39;</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>

## dictionary

Dictionary is a key-value table in Python. You can create one with the following JSON-like syntax:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">d</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="s">&quot;key&quot;</span><span class="p">:</span> <span class="s">&quot;value&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;key2&quot;</span><span class="p">:</span> <span class="s">&quot;value2&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

To get a value you can use either the **get** function or [] operator:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">d</span><span class="p">[</span><span class="s">&quot;key&quot;</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;value&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">d</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&quot;key&quot;</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;value&#39;</span>
</span></code></pre></td></tr></table></div></figure>

These functions are different in how they handle access to a non-existing key. The **get** function will return **None**, while [] operator will raise an exception:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">d</span><span class="p">[</span><span class="s">&quot;no_such_key&quot;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;pyshell#34&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="n">d</span><span class="p">[</span><span class="s">&quot;no_such_key&quot;</span><span class="p">]</span>
</span><span class='line'><span class="ne">KeyError</span><span class="p">:</span> <span class="s">&#39;no_such_key&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">d</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&quot;no_such_key&quot;</span><span class="p">)</span>
</span><span class='line'><span class="bp">None</span>
</span></code></pre></td></tr></table></div></figure>

To add an element into a dictionary you can either use the **put** method or an assignment operator:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">d</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="s">&quot;key3&quot;</span><span class="p">,</span> <span class="s">&quot;value3&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">d</span><span class="p">[</span><span class="s">&quot;key3&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;value3&quot;</span>
</span></code></pre></td></tr></table></div></figure>

Both methods are equivalent.

To remove an item from a dictionary we can use either **del** operator or the **pop** function. The difference between them is that the **pop** function returns a value associated with the return key, while **del** does not.

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">del</span> <span class="n">d</span><span class="p">[</span><span class="s">&quot;key&quot;</span><span class="p">]</span> <span class="c"># Returns nothing</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">d</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s">&quot;key&quot;</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;val&#39;</span>
</span></code></pre></td></tr></table></div></figure>

Both will raise a **KeyError** exception if a key does not exist.

Python provides two ways to check if a hash map contains a particular key: the **has_key** method and **in** operator:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">d</span> <span class="o">=</span> <span class="p">{</span><span class="s">&quot;key&quot;</span><span class="p">:</span> <span class="s">&quot;value&quot;</span><span class="p">}</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">d</span><span class="o">.</span><span class="n">has_key</span><span class="p">(</span><span class="s">&quot;key&quot;</span><span class="p">)</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="s">&quot;key&quot;</span> <span class="ow">in</span> <span class="n">d</span>
</span><span class='line'><span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>

We can also use **not in** operator to check if a key is not in a dictionary:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="s">&quot;no_such_key&quot;</span> <span class="ow">in</span> <span class="n">d</span>
</span><span class='line'><span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>

To get a list of keys simply uses the **keys** method on a dictionary:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">d</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;key&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>

### Python 3

Python 3 introduced a change into dictionary interface.

First of all **has_key** method was removed in Python 3, so now the **in** operator is the only way to test if a key exists in a dictionary.

The second difference is that in Python 2 a dictionary has two sets of methods **iterkeys**, **itervalues**, **iteritems** that return iterators for keys, values, and key-value pairs and **keys**, **values**, **items** that return copies of keys, values and key-value pairs. In contrast, Python 3 has only **keys**, **values**, and **items** that returns iterators instead of copies.

## set

Set is an unordered data structure that guarantees no duplicates. To create a set one need to list elements in curly brackets separated by commas:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

Alternatively, a set can be created with the **set** function that expects a collection (e.g. list) to be passed to it:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="nb">set</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>

Care must be taken when an empty set should be created. Empty curly brackets (**{}**) will create an empty dictionary. To create an empty set simply call the **set** function without arguments:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span> <span class="c"># empty set</span>
</span></code></pre></td></tr></table></div></figure>

To add an element to a set we can use the **add** method:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span>
</span><span class='line'><span class="nb">set</span><span class="p">([</span><span class="mi">1</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>

To remove an element from a set we can chose either the **remove** or the **discard** methods. The first one will raise KeyError if an element is not present in the set, while the second one will finish successfully:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;pyshell#83&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="ne">KeyError</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="o">.</span><span class="n">discard</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="o">.</span><span class="n">discard</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

As list and dictionary, set supports **in**, **not in** operators and the **len** function:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">1</span> <span class="ow">in</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">3</span> <span class="ow">not</span> <span class="ow">in</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span>
</span><span class='line'><span class="bp">False</span>
</span></code></pre></td></tr></table></div></figure>

Python supports a number of [operations on sets](https://en.wikipedia.org/wiki/Set_%28mathematics%29#Basic_operations), such as union, intersection, and difference:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s1</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s2</span> <span class="o">=</span> <span class="p">{</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">}</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s1</span> <span class="o">&lt;=</span> <span class="p">{</span><span class="mi">1</span><span class="p">}</span>         <span class="c"># same as s1.issubset({1})</span>
</span><span class='line'><span class="bp">False</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s1</span> <span class="o">&gt;=</span> <span class="p">{</span><span class="mi">1</span><span class="p">}</span>         <span class="c"># same as s1.issuperset({1})</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s1</span> <span class="o">|</span> <span class="n">s2</span>           <span class="c"># same as s1.union(s2)</span>
</span><span class='line'><span class="nb">set</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">])</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s1</span> <span class="o">&amp;</span> <span class="n">s2</span>           <span class="c"># same as s1.intersection(s2)</span>
</span><span class='line'><span class="nb">set</span><span class="p">([</span><span class="mi">3</span><span class="p">])</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s1</span> <span class="o">-</span> <span class="n">s2</span>           <span class="c"># same as s1.difference(s2)</span>
</span><span class='line'><span class="nb">set</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">])</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s1</span> <span class="o">^</span> <span class="n">s2</span>           <span class="c"># same as s1.symmetric_difference(s2)</span>
</span><span class='line'><span class="nb">set</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>  

# if-else

To use an if-statement in Python simply write "if condition:":

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">if</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;Hello, world!&quot;</span>
</span></code></pre></td></tr></table></div></figure>

Notice that instead of using brackets or reserved words to group statements in a single block Python considers all statements with the same indentation as a single code block. Statements in an if-block need to start with several whitespaces or a tab character.

To execute several statements in a single if-block simply add few more statements with the same number of spaces or tabs in front of them:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">if</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;Hello, world!&quot;</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;Hello, world!&quot;</span>
</span></code></pre></td></tr></table></div></figure>

Do not mix statements indented with a different number of spaces and don't mix tabs and spaces together. This will probably result in an IndentationError exception:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">if</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;Hello, world!&quot;</span>
</span><span class='line'> <span class="k">print</span> <span class="s">&quot;Hello, world!&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;pyshell#18&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">3</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;Hello, world!&quot;</span>
</span><span class='line'>                        <span class="o">^</span>
</span><span class='line'><span class="ne">IndentationError</span><span class="p">:</span> <span class="n">unindent</span> <span class="n">does</span> <span class="ow">not</span> <span class="n">match</span> <span class="nb">any</span> <span class="n">outer</span> <span class="n">indentation</span> <span class="n">level</span>
</span></code></pre></td></tr></table></div></figure>

Python supports a number of comparison operators that can be used in if-statements:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="mi">2</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">1</span> <span class="o">&lt;=</span> <span class="mi">2</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">1</span> <span class="o">&gt;</span> <span class="mi">2</span>
</span><span class='line'><span class="bp">False</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">1</span> <span class="o">&gt;=</span> <span class="mi">2</span>
</span><span class='line'><span class="bp">False</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">1</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">1</span> <span class="o">!=</span> <span class="mi">1</span>
</span><span class='line'><span class="bp">False</span>
</span></code></pre></td></tr></table></div></figure>

Keep in mind that **==** operator will return **True** if two different objects are structurally identical:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">l1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">l2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">l1</span> <span class="o">==</span> <span class="n">l2</span>
</span><span class='line'><span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>

To check if two references are pointing to the same object Python provide **is** and **is not** operators:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="ow">is</span> <span class="n">b</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">b</span>
</span><span class='line'><span class="bp">False</span>
</span></code></pre></td></tr></table></div></figure>

Python also supports **elif** and **else** keywords that can be used with **if** statement:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">if</span> <span class="n">frequency</span> <span class="o">&lt;</span> <span class="mi">20</span><span class="p">:</span>
</span><span class='line'>	<span class="n">sound_type</span> <span class="o">=</span> <span class="s">&quot;infrasound&quot;</span>
</span><span class='line'><span class="k">elif</span> <span class="n">frequency</span> <span class="o">&gt;</span> <span class="mi">20000</span><span class="p">:</span>
</span><span class='line'>	<span class="n">sound_type</span> <span class="o">=</span> <span class="s">&quot;ultrasound&quot;</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>	<span class="n">sound_type</span> <span class="o">=</span> <span class="s">&quot;hearing range&quot;</span>
</span></code></pre></td></tr></table></div></figure>

Boolean operations are supported with three operators: **and**, **or**, and **not**:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="bp">True</span> <span class="ow">and</span> <span class="bp">False</span>
</span><span class='line'><span class="bp">False</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="bp">False</span> <span class="ow">or</span> <span class="bp">True</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="ow">not</span> <span class="bp">True</span>
</span><span class='line'><span class="bp">False</span>
</span></code></pre></td></tr></table></div></figure>

Beware that **not a == b** is interpreted as **not (a == b)** and not as **not(a) == b**. **a == not b** will result in a syntax error:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="bp">True</span> <span class="o">==</span> <span class="ow">not</span> <span class="bp">False</span>
</span><span class='line'><span class="ne">SyntaxError</span><span class="p">:</span> <span class="n">invalid</span> <span class="n">syntax</span>
</span></code></pre></td></tr></table></div></figure>

## Python 3

**!=** operator has an alternative in Python 2: **<>**. The later is used for backward compatibility only in Python 2 and was removed in Python 3.

# Loops

Python has two types of loops in it: **while** and **for**.

**while** loop works pretty much the same as in other languages it has a condition and a block of code that will be executed while the condition is true:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&#39;str&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
</span><span class='line'>	<span class="k">print</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>	<span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">s</span>
</span><span class='line'><span class="n">t</span>
</span><span class='line'><span class="n">r</span>
</span></code></pre></td></tr></table></div></figure>

**for** loop is used only for iterating over collections. It has a form **for var_name in collection**:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]:</span>
</span><span class='line'>	<span class="k">print</span> <span class="n">i</span> <span class="o">**</span> <span class="n">i</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="mi">4</span>
</span><span class='line'><span class="mi">27</span>
</span><span class='line'><span class="mi">256</span>
</span></code></pre></td></tr></table></div></figure>

This can be used to iterate over characters in a string, or items in lists, tuples or sets.

If **for** loop is used with a dictionary it will iterate over its keys:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">d</span> <span class="o">=</span> <span class="p">{</span><span class="s">&quot;key_1&quot;</span><span class="p">:</span> <span class="s">&quot;value_1&quot;</span><span class="p">,</span> <span class="s">&quot;key_2&quot;</span><span class="p">:</span> <span class="s">&quot;value_2&quot;</span><span class="p">}</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">d</span><span class="p">:</span>
</span><span class='line'>	<span class="k">print</span> <span class="n">k</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">key_1</span>
</span><span class='line'><span class="n">key_2</span>
</span></code></pre></td></tr></table></div></figure>

If you've been coding in C-like languages you should be familiar with a form of a for loop that can be used to iterate over a consequent range of numbers:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{...}</span>
</span></code></pre></td></tr></table></div></figure>

Python does not provide a separate type of loop for this purpose. Instead, we can use the built-in **range** function that can generate an ordered collections that can be iterated over. If it is called with a single argument **n** it will create a list of numbers from **0** to **n-1**:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
</span><span class='line'>	<span class="k">print</span> <span class="n">i</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="mi">0</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="mi">4</span>
</span></code></pre></td></tr></table></div></figure>

**range** can also be called with two arguments **n** and **m** it will return a sequence with numbers from **n** to **m-1**:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>

If called with 3 arguments it will return values from **n** to **m-1** with a defined step:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>

Python also provides the **xrange** function that does not generate a list in advance but creates an iterator instead. Since creating an iterator is usually faster and occupies less space it's preferable to use **xrange** instead of **range**.

## Python 3

In Python 3 there is no **xrange** function while **range** behaves exactly like **xrange** in Python 2.

# Functions

**def** operator is used to define a function in Python. It should be followed by a function name, list of arguments, and a function body:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">strip_strings</span><span class="p">(</span><span class="n">strs</span><span class="p">):</span>
</span><span class='line'>	<span class="n">res</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>	<span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">strs</span><span class="p">:</span>
</span><span class='line'>		<span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">strip</span><span class="p">())</span>
</span><span class='line'>	<span class="k">return</span> <span class="n">res</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">strip_strings</span><span class="p">([</span><span class="s">&#39; abc&#39;</span><span class="p">,</span> <span class="s">&#39;def &#39;</span><span class="p">,</span> <span class="s">&#39; foo &#39;</span><span class="p">])</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;abc&#39;</span><span class="p">,</span> <span class="s">&#39;def&#39;</span><span class="p">,</span> <span class="s">&#39;foo&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>

You can also define default values for parameters:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">convert</span><span class="p">(</span><span class="n">strs</span><span class="p">,</span> <span class="n">uppercase</span><span class="o">=</span><span class="bp">True</span><span class="p">):</span>
</span><span class='line'>	<span class="n">res</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>	<span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">strs</span><span class="p">:</span>
</span><span class='line'>		<span class="k">if</span> <span class="n">uppercase</span><span class="p">:</span>
</span><span class='line'>			<span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">upper</span><span class="p">())</span>
</span><span class='line'>		<span class="k">else</span><span class="p">:</span>
</span><span class='line'>			<span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">lower</span><span class="p">())</span>
</span><span class='line'>	<span class="k">return</span> <span class="n">res</span>
</span></code></pre></td></tr></table></div></figure>

Passing a value for an argument with a default value is optional. If it's not passed the default value will be used instead:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">convert</span><span class="p">([</span><span class="s">&#39;abc&#39;</span><span class="p">,</span> <span class="s">&#39;def&#39;</span><span class="p">])</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;ABC&#39;</span><span class="p">,</span> <span class="s">&#39;DEF&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">convert</span><span class="p">([</span><span class="s">&#39;abc&#39;</span><span class="p">,</span> <span class="s">&#39;def&#39;</span><span class="p">],</span> <span class="bp">True</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;ABC&#39;</span><span class="p">,</span> <span class="s">&#39;DEF&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>

The only restriction on default arguments is that they should be placed after all non-default arguments in a function definition:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">convert</span><span class="p">(</span><span class="n">uppercase</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">strs</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="ne">SyntaxError</span><span class="p">:</span> <span class="n">non</span><span class="o">-</span><span class="n">default</span> <span class="n">argument</span> <span class="n">follows</span> <span class="n">default</span> <span class="n">argument</span>
</span></code></pre></td></tr></table></div></figure>

Values can be passed to a function in two ways: via positional argument or via key-value arguments. Positional arguments is the common way of passing arguments like in other programming languages:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">convert</span><span class="p">(</span><span class="n">strings</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


With key-value arguments values can be passed in any order. The following calls are identical:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">convert</span><span class="p">(</span><span class="n">strs</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;abc&#39;</span><span class="p">],</span> <span class="n">uppercase</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'><span class="n">convert</span><span class="p">(</span><span class="n">uppercase</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">strs</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;abc&#39;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>

The only restriction on key-value arguments is that key-value arguments should be passed after all positional arguments:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">convert</span><span class="p">(</span><span class="n">strs</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;abc&#39;</span><span class="p">],</span> <span class="bp">True</span><span class="p">)</span>
</span><span class='line'><span class="ne">SyntaxError</span><span class="p">:</span> <span class="n">non</span><span class="o">-</span><span class="n">keyword</span> <span class="n">arg</span> <span class="n">after</span> <span class="n">keyword</span> <span class="n">arg</span>
</span></code></pre></td></tr></table></div></figure>

# Conclusion

This articles covered basics of Python and you should be ready to write your own code.

Please write your thoughts on this article in the comments section and share if you liked it.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Python]]></title>
    <link href="http://mushketyk.com/2016/03/27/introduction-to-python/"/>
    <updated>2016-03-27T22:36:17+01:00</updated>
    <id>http://mushketyk.com/2016/03/27/introduction-to-python</id>
    <content type="html"><![CDATA[This short article provides a quick introduction into Python programming language, describes differences between different flavors of Python, and demonstrates how to start working with Python.

<!--more-->

# Why Python

Python is an extremely popular dynamic programming language. It is currently used in multiple areas such as automation, education, scientific computations, websites development and many others. Python was adopted by many IT companies including Netflix, Google, Spotify, Dropbox, Quora and many others.

At the time of writing, Python occupies the 5th place by language popularity according to the [TIOBE index](http://www.tiobe.com/tiobe_index).

In addition to that Python has an amazing community that has created more than 70 thousand packages for working with databases, developing websites, performing scientific computations, etc.

# Why so many Pythons

It turns out that there is no such thing as a single Python language, but rather two Python languages: Python 2 and Python 3.

Python 2.7 is the version of Python that is commonly used in production today. Python 3 is a newer version of this language which is still gaining popularity among developers. Despite the fact that these languages are very similar Python 3 is not backward compatible, meaning that programs written in Python 2 are not valid Python 3 programs.

Even though these languages are different Python 2.7 developer can start code in Python 3 almost immediately, so learning Python 2.7 is still a good time investment.

In addition to having two slightly different languages Python has several different implementation:

* **CPython** - this is the default Python implementation that is executed when you run **python** command on your machine. It's the most supported and widely used Python implementation and I would recommend using this version when you learning Python.
* **PyPy** - is an alternative Python implementation that usually works faster and occupies much less RAM than CPython. Unfortunately, PyPy is not fully compatible with CPython so not every program that works with CPython will work using PyPy. You can read more about compatibility between CPython and PyPy [here](http://pypy.org/compat.html).
* **Jython** - is a project that lets run Python programs on a Java virtual machine. A benefit of this is that you can use both Java and Python modules in the same program
* **IronPython** - similarly to Jython this projects lets us run Python programs on a .NET virtual machine.

# Installation

## Python

By default, Python is installed on most Linux machines, but if you don't have it you can install it with a simple command:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">python</span>
</span></code></pre></td></tr></table></div></figure>

On the other hand Python 3 is usually not installed by default. To install it run the following command:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">python3</span>
</span></code></pre></td></tr></table></div></figure>
## pip

One of the benefits of Python is that it has thousands and thousands of useful packages that can be used in your programs. The simplest way to install them in your system is by using the [**pip**](https://pypi.python.org/pypi/pip) tool. To install it run the following command:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">python</span><span class="o">-</span><span class="n">pip</span>
</span></code></pre></td></tr></table></div></figure>

Now to install a Python package simply run **pip install <package>**. For example, this will install a popular plotting Python library **matplotlib**:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">sudo</span> <span class="n">pip</span> <span class="n">install</span> <span class="n">matplotlib</span>
</span></code></pre></td></tr></table></div></figure>

## virtualenv

When you will start working on multiple Python projects at the same time you may find yourself in a situation when different projects require different versions of the same package. Since **pip** allows to have only a single version of a package in the system there is a need to somehow isolate different projects.

**virtualenv** does just that. It can be used to create a separate Python execution environment with its own set of dependencies. To install it simply run following commands:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Install dependencies for virtualenv</span>
</span><span class='line'><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">python</span><span class="o">-</span><span class="n">dev</span> <span class="n">build</span><span class="o">-</span><span class="n">essential</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Install virtualenv</span>
</span><span class='line'><span class="n">sudo</span> <span class="n">pip</span> <span class="n">install</span> <span class="n">virtualenv</span> <span class="n">virtualenvwrapper</span>
</span></code></pre></td></tr></table></div></figure>

After this you can easily create a virtual environment:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Create a virtual environment in folder &quot;env&quot;</span>
</span><span class='line'><span class="n">virtualenv</span> <span class="n">env</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Activate newly created environment</span>
</span><span class='line'><span class="n">source</span> <span class="n">env</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">activate</span>
</span></code></pre></td></tr></table></div></figure>

Now if you run **pip install <package>** it will install a package in the newly created isolated environment and won't be visible outside of it. You can read more about virtualenv [here](https://virtualenv.pypa.io/en/latest/userguide.html).

# Interactive Python shells

The simplest way to start experimenting with Python is by using an interactive shell. If you run **python** (or **python3**) with no arguments it will start an interactive shell where you can execute Python commands:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">%</span> <span class="n">python</span>                                                                                                                                                                                                                                     <span class="o">~</span>
</span><span class='line'><span class="n">Python</span> <span class="mf">2.7</span><span class="o">.</span><span class="mi">6</span> <span class="p">(</span><span class="n">default</span><span class="p">,</span> <span class="n">Jun</span> <span class="mi">22</span> <span class="mi">2015</span><span class="p">,</span> <span class="mi">17</span><span class="p">:</span><span class="mi">58</span><span class="p">:</span><span class="mi">13</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="n">GCC</span> <span class="mf">4.8</span><span class="o">.</span><span class="mi">2</span><span class="p">]</span> <span class="n">on</span> <span class="n">linux2</span>
</span><span class='line'><span class="n">Type</span> <span class="s">&quot;help&quot;</span><span class="p">,</span> <span class="s">&quot;copyright&quot;</span><span class="p">,</span> <span class="s">&quot;credits&quot;</span> <span class="ow">or</span> <span class="s">&quot;license&quot;</span> <span class="k">for</span> <span class="n">more</span> <span class="n">information</span><span class="o">.</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="s">&quot;Hello, world!&quot;</span>
</span><span class='line'><span class="n">Hello</span><span class="p">,</span> <span class="n">world</span><span class="err">!</span>
</span></code></pre></td></tr></table></div></figure>

Unfortunately, default Python shell is very limited. A better option is to use [**IPython**](https://ipython.org/) shell that provides tab-completion, object introspection, system shell access and persistent command history. To install it simply run the following command:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">sudo</span> <span class="n">pip</span> <span class="n">install</span> <span class="n">ipython</span>
</span></code></pre></td></tr></table></div></figure>

Now you can run it with the **ipython** command:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">%</span> <span class="n">ipython</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="n">IPython</span> <span class="mf">4.1</span><span class="o">.</span><span class="mi">2</span> <span class="o">--</span> <span class="n">An</span> <span class="n">enhanced</span> <span class="n">Interactive</span> <span class="n">Python</span><span class="o">.</span>
</span><span class='line'><span class="err">?</span>         <span class="o">-&gt;</span> <span class="n">Introduction</span> <span class="ow">and</span> <span class="n">overview</span> <span class="n">of</span> <span class="n">IPython</span><span class="s">&#39;s features.</span>
</span><span class='line'><span class="o">%</span><span class="n">quickref</span> <span class="o">-&gt;</span> <span class="n">Quick</span> <span class="n">reference</span><span class="o">.</span>
</span><span class='line'><span class="n">help</span>      <span class="o">-&gt;</span> <span class="n">Python</span><span class="s">&#39;s own help system.</span>
</span><span class='line'><span class="nb">object</span><span class="err">?</span>   <span class="o">-&gt;</span> <span class="n">Details</span> <span class="n">about</span> <span class="s">&#39;object&#39;</span><span class="p">,</span> <span class="n">use</span> <span class="s">&#39;object??&#39;</span> <span class="k">for</span> <span class="n">extra</span> <span class="n">details</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span>
</span></code></pre></td></tr></table></div></figure>

If you are planning to use Python for scientific applications a better choice could be to use Jupyter that you can use either [online](https://try.jupyter.org/) or install it on your machine with **pip**:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">sudo</span> <span class="n">pip</span> <span class="n">install</span> <span class="o">-</span><span class="n">U</span> <span class="n">jupyter</span>
</span></code></pre></td></tr></table></div></figure>

Python also has a standard GUI interactive shell called [IDLE](https://docs.python.org/2/library/idle.html). It can be installed with a single command:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">idle</span>
</span></code></pre></td></tr></table></div></figure>

To start it just run the **idle** command in your shell and you will see an interactive Python session:

<img class="center" src="/images/idle.png">


To run interactive Python 3 session you need to install a separate **idle3** package:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">idle3</span>
</span></code></pre></td></tr></table></div></figure>

To start IDLE for Python 3, run **idle3** command in your shell.

# Development environments

## Editors

There are multiple editors suitable for Python development. In addition to classical vim and emacs that have a number of plug-ins for Python development modern editors such as Sublime or Atom provide good support for Python development.

Here are few useful links if you want to turn your favorite editor into a Python IDE:

* [Setting Up Sublime Text 3 for Full Stack Python Development](https://realpython.com/blog/python/setting-up-sublime-text-3-for-full-stack-python-development/)
* [Install and Configure the Atom Editor for Python](http://www.marinamele.com/install-and-configure-atom-editor-for-python)
* [Configuring vim for Python](https://www.fullstackpython.com/vim.html)
* [Emacs as a Python IDE](http://www.jesshamrick.com/2012/09/18/emacs-as-a-python-ide/)

## IDEs

### PyCharm

[PyCharm](https://www.jetbrains.com/pycharm/) is an IDE created by IntelliJ and has two versions: free Community edition and paid Full version.

<img class="center" src="https://upload.wikimedia.org/wikipedia/commons/0/05/PyCharm_4.5.1.png">

Paid version has more features including web development support, remote development and database support.

### PyDev

PyDev is a plug-in for the Eclipse IDE.

<img class="center" src="https://upload.wikimedia.org/wikipedia/commons/c/c9/Screenshot_Vrapper.png">

It has less features than paid version of PyCharm, but it's absolutely free.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Data Structures Idioms]]></title>
    <link href="http://mushketyk.com/2015/12/21/python-data-structures-idioms/"/>
    <updated>2015-12-21T08:59:24+00:00</updated>
    <id>http://mushketyk.com/2015/12/21/python-data-structures-idioms</id>
    <content type="html"><![CDATA[Significant portion of our time we as a developers spend writing code that manipulates basic data structures: traverse a list, create a map, filter elements in a collection. Therefore it is important to know how effectively do it in Python and make your code more readable and efficient.

<!--more-->

# Using lists

## Iterate over a list

There are many ways to iterate over a list in Python. And the simplest way would be just to maintain current position in list and increment it on each iteration:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">## SO WRONG</span>
</span><span class='line'><span class="n">l</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span><span class='line'><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">l</span><span class="p">):</span>
</span><span class='line'>	<span class="k">print</span> <span class="n">l</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>	<span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>

This works, but Python provides a more convenient way to do using [**range**](https://docs.python.org/2/library/functions.html#range) function. **range** function can be used to generate numbers from 0 to N and this can be used as an analog of a **for** loop in C:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">## STILL WRONG</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">l</span><span class="p">)):</span>
</span><span class='line'>	<span class="k">print</span> <span class="n">l</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>

While this is more concise, there is a better way to do it since Python let us iterate over a list directly, similarly to **foreach** loops in other languages:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># RIGHT</span>
</span><span class='line'><span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">l</span><span class="p">:</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">v</span>
</span></code></pre></td></tr></table></div></figure>

## Iterate a list in reverse order

How can we iterate a list in the reverse order? One way to do it would be to use an unreadable 3 arguments version of the **range** function and provide position of the last element in a list (first argument), position of an element before the first element in the list (second argument) and negative step to go in reverse order (third argument):

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># WRONG</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">l</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>	<span class="k">print</span> <span class="n">l</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>

But as you've may already guessed Python should offer a much better way to do it. We can just use [**reversed**](https://docs.python.org/2/library/functions.html#reversed) function in a **for** loop:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># RIGHT</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">reversed</span><span class="p">(</span><span class="n">l</span><span class="p">):</span>
</span><span class='line'>	<span class="k">print</span> <span class="n">i</span>
</span></code></pre></td></tr></table></div></figure>

## Access the last element

A commonly used idiom to access the last element in a list would be: get length of a list, subtract 1 from it, use result number as a position of the last element:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># WRONG</span>
</span><span class='line'><span class="n">l</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">l</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">l</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="mi">5</span>
</span></code></pre></td></tr></table></div></figure>

This is cumbersome in Python since it supports negative indexes to access elements from the end of the list. So -1 is the last element:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># RIGHT</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">l</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="mi">5</span>
</span></code></pre></td></tr></table></div></figure>

Negative indexes can also be used to access a next to last element and so on:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># RIGHT</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">l</span><span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span>
</span><span class='line'><span class="mi">4</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">l</span><span class="p">[</span><span class="o">-</span><span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>

## Use sequence unpacking

A common way to extract values from a list to multiple variables in other programming languages would be to use indexes:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># WRONG</span>
</span><span class='line'><span class="n">l1</span> <span class="o">=</span> <span class="n">l</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="n">l2</span> <span class="o">=</span> <span class="n">l</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="n">l3</span> <span class="o">=</span> <span class="n">l</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>

But Python supports sequence unpacking that lets us to extract values from a list to multiple variables:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># RIGHT</span>
</span><span class='line'><span class="n">l1</span><span class="p">,</span> <span class="n">l2</span><span class="p">,</span> <span class="n">l3</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">l1</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">l2</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">l3</span>
</span><span class='line'><span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>

You can read more about sequence unpacking [here](/2015/12/14/sequence-unpacking-in-python/).

## Use lists comprehensions

Let's say we want to filter all grades for a movie posted by users of age 18 or bellow.

How many times did you write code like this:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># WRONG</span>
</span><span class='line'><span class="n">under_18_grades</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="k">for</span> <span class="n">grade</span> <span class="ow">in</span> <span class="n">grades</span><span class="p">:</span>
</span><span class='line'>	<span class="k">if</span> <span class="n">grade</span><span class="o">.</span><span class="n">age</span> <span class="o">&lt;=</span> <span class="mi">18</span><span class="p">:</span>
</span><span class='line'>		<span class="n">under_18_grades</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">grade</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

Do it no more in Python and use list comprehensions with **if** statement instead.

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># RIGHT</span>
</span><span class='line'><span class="n">under_18_grades</span> <span class="o">=</span> <span class="p">[</span><span class="n">grade</span> <span class="k">for</span> <span class="n">grade</span> <span class="ow">in</span> <span class="n">grades</span> <span class="k">if</span> <span class="n">grade</span><span class="o">.</span><span class="n">age</span> <span class="o">&lt;=</span> <span class="mi">18</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>

## Use enumerate function

Sometimes you need to iterate over a list and keep track of a position of each element. Say, if you need to display a menu items in a shell you can simply use the **range** function:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># WRONG</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">menu_items</span><span class="p">)):</span>
</span><span class='line'>	<span class="n">menu_items</span> <span class="o">=</span> <span class="n">menu_items</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>	<span class="k">print</span> <span class="s">&quot;{}. {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">menu_items</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

A better way to do it would be to use [**enumerate**](https://docs.python.org/2/library/functions.html#enumerate) function. It is a iterator that returns pairs each of which contains position of an element and the element itself:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># RIGHT</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">menu_items</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">menu_items</span><span class="p">):</span>
</span><span class='line'>	<span class="k">print</span> <span class="s">&quot;{}. {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">menu_items</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

## Use keys to sort

A typical way to sort elements in other programming languages is to provide a function that compares two objects along with a collection to sort. In Python it would look like:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">people</span> <span class="o">=</span> <span class="p">[</span><span class="n">Person</span><span class="p">(</span><span class="s">&#39;John&#39;</span><span class="p">,</span> <span class="mi">30</span><span class="p">),</span> <span class="n">Person</span><span class="p">(</span><span class="s">&#39;Peter&#39;</span><span class="p">,</span> <span class="mi">28</span><span class="p">),</span> <span class="n">Person</span><span class="p">(</span><span class="s">&#39;Joe&#39;</span><span class="p">,</span> <span class="mi">42</span><span class="p">)]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># WRONG</span>
</span><span class='line'><span class="k">def</span> <span class="nf">compare_people</span><span class="p">(</span><span class="n">p1</span><span class="p">,</span> <span class="n">p2</span><span class="p">):</span>
</span><span class='line'>	<span class="k">if</span> <span class="n">p1</span><span class="o">.</span><span class="n">age</span> <span class="o">&lt;</span> <span class="n">p2</span><span class="o">.</span><span class="n">age</span><span class="p">:</span>
</span><span class='line'>		<span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>	<span class="k">if</span> <span class="n">p1</span><span class="o">.</span><span class="n">age</span> <span class="o">&gt;</span> <span class="n">p2</span><span class="o">.</span><span class="n">age</span><span class="p">:</span>
</span><span class='line'>		<span class="k">return</span> <span class="mi">1</span>
</span><span class='line'>	<span class="k">return</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="nb">sorted</span><span class="p">(</span><span class="n">people</span><span class="p">,</span> <span class="nb">cmp</span><span class="o">=</span><span class="n">compare_people</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">Person</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">&#39;Peter&#39;</span><span class="p">,</span> <span class="n">age</span><span class="o">=</span><span class="mi">28</span><span class="p">),</span> <span class="n">Person</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">&#39;John&#39;</span><span class="p">,</span> <span class="n">age</span><span class="o">=</span><span class="mi">30</span><span class="p">),</span> <span class="n">Person</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">&#39;Joe&#39;</span><span class="p">,</span> <span class="n">age</span><span class="o">=</span><span class="mi">42</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure>

But this is not the best way to do it. Since all we need to do to compare two instances of **Person** class is to compare values of their **age** field. Why should we write a complex compare function for this?

Specifically for this case [**sorted**](https://docs.python.org/2/library/functions.html#sorted) function accepts **key** function that is used to extract a key that will be used to compare two instances of an object:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># RIGHT</span>
</span><span class='line'><span class="nb">sorted</span><span class="p">(</span><span class="n">people</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">p</span><span class="p">:</span> <span class="n">p</span><span class="o">.</span><span class="n">age</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="n">Person</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">&#39;Peter&#39;</span><span class="p">,</span> <span class="n">age</span><span class="o">=</span><span class="mi">28</span><span class="p">),</span> <span class="n">Person</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">&#39;John&#39;</span><span class="p">,</span> <span class="n">age</span><span class="o">=</span><span class="mi">30</span><span class="p">),</span> <span class="n">Person</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">&#39;Joe&#39;</span><span class="p">,</span> <span class="n">age</span><span class="o">=</span><span class="mi">42</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure>

## Use all/any functions

If you want to check if all or any value in a collection is True one way would be iterate over a list:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># WRONG</span>
</span><span class='line'><span class="k">def</span> <span class="nf">all_true</span><span class="p">(</span><span class="n">lst</span><span class="p">):</span>
</span><span class='line'>	<span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">lst</span><span class="p">:</span>
</span><span class='line'>		<span class="k">if</span> <span class="ow">not</span> <span class="n">v</span><span class="p">:</span>
</span><span class='line'>			<span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>	<span class="k">return</span> <span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>

But Python already has [**all**](https://docs.python.org/2/library/functions.html#all), [**any**](https://docs.python.org/2/library/functions.html#any) functions for that. **all** returns True if all values in an iterable passed to it are True, while **any** returns True if at least one of values passed to it is True:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># RIGHT</span>
</span><span class='line'><span class="nb">all</span><span class="p">([</span><span class="bp">True</span><span class="p">,</span> <span class="bp">False</span><span class="p">])</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="bp">False</span>
</span><span class='line'>
</span><span class='line'><span class="nb">any</span><span class="p">([</span><span class="bp">True</span><span class="p">,</span> <span class="bp">False</span><span class="p">])</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>

To check if all items comply with a certain condition, you can convert a list of arbitrary objects to a list of booleans using list comprehension:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nb">all</span><span class="p">([</span><span class="n">person</span><span class="o">.</span><span class="n">age</span> <span class="o">&gt;</span> <span class="mi">18</span> <span class="k">for</span> <span class="n">person</span> <span class="ow">in</span> <span class="n">people</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>

Or you can pass a generator (just omit square braces around the list comprehension):

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nb">all</span><span class="p">(</span><span class="n">person</span><span class="o">.</span><span class="n">age</span> <span class="o">&gt;</span> <span class="mi">18</span> <span class="k">for</span> <span class="n">person</span> <span class="ow">in</span> <span class="n">people</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

Not only this will save you two keystrokes it will also omit creation of an intermediate list (more about this later).

## Use slicing

You can take part of a list using a technique called slicing. Instead of providing a single index in a square brackets when accessing a list you can provide the following three values

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">lst</span><span class="p">[</span><span class="n">start</span><span class="p">:</span><span class="n">end</span><span class="p">:</span><span class="n">step</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>

All of these parameters are optional and you can get different parts of a list if you omit some of them. If only start position is provided it will return all elements in a list starting from the specified index:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># RIGHT</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">lst</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">lst</span><span class="p">[</span><span class="mi">3</span><span class="p">:]</span>
</span><span class='line'><span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>

If only end position is provided slicing will return all elements up to the provided position:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">lst</span><span class="p">[:</span><span class="o">-</span><span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>

You can also get part of a list between two indexes:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">lst</span><span class="p">[</span><span class="mi">3</span><span class="p">:</span><span class="mi">6</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>

By default step in slicing is equal to one which mean that all elements between start and end positions are returned. If you want to get only every second element or every third element you need to provide a step value:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">lst</span><span class="p">[</span><span class="mi">2</span><span class="p">:</span><span class="mi">8</span><span class="p">:</span><span class="mi">2</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>
# Do not create unnecessary objects

## Use xrange

**range** is a useful function if you need to generate consistent integer values in a range, but it has one drawback: it returns a list with all generated values:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># WRONG</span>
</span><span class='line'><span class="c"># Returns a too big list</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1000000000</span><span class="p">):</span>
</span><span class='line'>	<span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>

Solution here is to use [**xrange**](https://docs.python.org/2/library/functions.html#xrange) function. It immediately return an iterator instead of creating a list:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># RIGHT</span>
</span><span class='line'><span class="c"># Returns an iterator</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">1000000000</span><span class="p">):</span>
</span><span class='line'>	<span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>

The drawback of **xrange** comparing to the **range** function is that it's output can be iterated only once.

### New in Python 3

In Python 3 **xrange** was removed and **range** function behaves like **xrange** in Python 2.x. If you need to iterate over an output of **range** in Python 3 multiple times you can convert its output in to a list:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span>
</span><span class='line'><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>

## Use izip

If you need to generate pairs from elements in two collections, one way to do it would be to use the **zip** function:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># WRONG</span>
</span><span class='line'><span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;Joe&#39;</span><span class="p">,</span> <span class="s">&#39;Kate&#39;</span><span class="p">,</span> <span class="s">&#39;Peter&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">ages</span> <span class="o">=</span> <span class="p">[</span><span class="mi">30</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">41</span><span class="p">]</span>
</span><span class='line'><span class="c"># Creates a list</span>
</span><span class='line'><span class="nb">zip</span><span class="p">(</span><span class="n">names</span><span class="p">,</span> <span class="n">ages</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">[(</span><span class="s">&#39;Joe&#39;</span><span class="p">,</span> <span class="mi">30</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;Kate&#39;</span><span class="p">,</span> <span class="mi">28</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;Peter&#39;</span><span class="p">,</span> <span class="mi">41</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure>

Instead we can use the [**izip**](https://docs.python.org/2/library/itertools.html#itertools.izip) function that would return a return an iterator instead of creating a new list:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># RIGHT</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">izip</span>
</span><span class='line'><span class="c"># Creates an iterator</span>
</span><span class='line'><span class="n">it</span> <span class="o">=</span> <span class="n">izip</span><span class="p">(</span><span class="n">names</span><span class="p">,</span> <span class="n">ages</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>
### New in Python 3

In Python 3 **izip** function is removed and **zip** behaves like **izip** function in Python 2.x.

## Use generators

Lists comprehensions is a powerful tool in Python, but since it can use extensive amount of memory since each list comprehension will create a new list:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># WRONG</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Original list</span>
</span><span class='line'><span class="n">lst</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="c"># This will create a new list</span>
</span><span class='line'><span class="n">lst_1</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">lst</span><span class="p">]</span>
</span><span class='line'><span class="c"># This will create another list</span>
</span><span class='line'><span class="n">lst_2</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="o">**</span> <span class="mi">2</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">lst_1</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>

A way to avoid this is to use generators instead of list comprehensions. The difference in syntax is minimal: you should use parenthesis instead of square brackets, but the difference is crucial. The following example does not create any intermediate lists:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># RIGHT</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Original list</span>
</span><span class='line'><span class="n">lst</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="c"># Won&#39;t create a new list</span>
</span><span class='line'><span class="n">lst_1</span> <span class="o">=</span> <span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">lst</span><span class="p">)</span>
</span><span class='line'><span class="c"># Won&#39;t create another list</span>
</span><span class='line'><span class="n">lst_2</span> <span class="o">=</span> <span class="p">(</span><span class="n">i</span> <span class="o">**</span> <span class="mi">2</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">lst_1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

This is especially handy if you may need to process only part of the result collection to get a result, say to find a first element that match a certain condition.


# Use dictionaries idiomatically

## Avoid using keys() function

If you need to iterate over keys in a dictionary you may be inclined to use **keys** function on a hash map:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># WRONG</span>
</span><span class='line'><span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">d</span><span class="o">.</span><span class="n">keys</span><span class="p">():</span>
</span><span class='line'>	<span class="k">print</span> <span class="n">k</span>
</span></code></pre></td></tr></table></div></figure>

But there is a better way, you use iterate over a dictionary it performs iteration over its keys, so you can do simply:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># RIGHT</span>
</span><span class='line'><span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">d</span><span class="p">:</span>
</span><span class='line'>	<span class="k">print</span> <span class="n">k</span>
</span></code></pre></td></tr></table></div></figure>

Not only it will save you some typing it will prevent from creating a copy of all keys in a dict as **keys** method does.


## Iterate over keys and values

If you use **keys** method it's really easy to iterate keys and values in a dictionary like this:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#WRONG</span>
</span><span class='line'><span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">d</span><span class="p">:</span>
</span><span class='line'>  <span class="n">v</span> <span class="o">=</span> <span class="n">d</span><span class="p">[</span><span class="n">k</span><span class="p">]</span>
</span><span class='line'>	<span class="k">print</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span>
</span></code></pre></td></tr></table></div></figure>

But there is a better way. You can use **items** function that returns key-value pairs from a dictionary:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># RIGHT</span>
</span><span class='line'><span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">d</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span><span class='line'>	<span class="k">print</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span>
</span></code></pre></td></tr></table></div></figure>

Not only this method is more concise, it's a more efficient too.

## Use dictionaries comprehension

One way to create a dictionary is to assign values to it one-by-one:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># WRONG</span>
</span><span class='line'>
</span><span class='line'><span class="n">d</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="k">for</span> <span class="n">person</span> <span class="ow">in</span> <span class="n">people</span><span class="p">:</span>
</span><span class='line'>	<span class="n">d</span><span class="p">[</span><span class="n">person</span><span class="o">.</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">person</span>
</span></code></pre></td></tr></table></div></figure>

Instead you can use a dictionary comprehension to turn this into a one liner:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># RIGHT</span>
</span><span class='line'><span class="n">d</span> <span class="o">=</span> <span class="p">{</span><span class="n">person</span><span class="o">.</span><span class="n">name</span><span class="p">:</span> <span class="n">person</span> <span class="k">for</span> <span class="n">person</span> <span class="ow">in</span> <span class="n">people</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



# Use collections module

## Use namedtuple

If you need a struct like type you may just define a class with an **__init__** method and a bunch of fields:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># WRONG</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Point</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>	<span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
</span><span class='line'>		<span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">x</span>
</span><span class='line'>		<span class="bp">self</span><span class="o">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">y</span>
</span></code></pre></td></tr></table></div></figure>

However [**collections**](https://docs.python.org/2/library/collections.html) module from Python library provides a [**namedtuple**](https://docs.python.org/2/library/collections.html#collections.namedtuple) type that turns this into a one-liner:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># RIGHT</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">namedtuple</span>
</span><span class='line'><span class="n">Point</span> <span class="o">=</span> <span class="n">namedtuple</span><span class="p">(</span><span class="s">&#39;Point&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;x&#39;</span><span class="p">,</span> <span class="s">&#39;y&#39;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>

In addition **namedtuple** implements **\_\_str\_\_**, **\_\_repr\_\_**, and **\_\_eq\_\_** methods:


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">Point</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="n">Point</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">Point</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="n">Point</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>

## Use defaultdict

If we need to count a number of times an element is encountered in a collection, we can use a common approach:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># WRONG</span>
</span><span class='line'><span class="n">d</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">lst</span><span class="p">:</span>
</span><span class='line'>	<span class="k">if</span> <span class="n">v</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">d</span><span class="p">:</span>
</span><span class='line'>		<span class="n">d</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>	<span class="k">else</span><span class="p">:</span>
</span><span class='line'>		<span class="n">d</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>

**collections** module provides a very handy class for this case which is called **defaultdict**. It's constructor accepts a function that will be used to calculate a value for a non-existing key:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">d</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="k">lambda</span><span class="p">:</span> <span class="mi">42</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">d</span><span class="p">[</span><span class="s">&#39;key&#39;</span><span class="p">]</span>
</span><span class='line'><span class="mi">42</span>
</span></code></pre></td></tr></table></div></figure>

To rewrite counting example we can pass the **int** function to **defaultdict** which returns zero if called with no arguments:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># RIGHT</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>
</span><span class='line'><span class="n">d</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">lst</span><span class="p">:</span>
</span><span class='line'>	<span class="n">d</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>

**defaultdict** is useful when you need to create any kind of grouping of items in a collection, but you just need to get count of elements you may use **Counter** class instead:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># RIGHT</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">Counter</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">counter</span> <span class="o">=</span> <span class="n">Counter</span><span class="p">(</span><span class="n">lst</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">counter</span>
</span><span class='line'><span class="n">Counter</span><span class="p">({</span><span class="mi">4</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">:</span> <span class="mi">1</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Do Not Use Mutable Values as Default Values]]></title>
    <link href="http://mushketyk.com/2015/12/19/do-not-use-mutable-values-as-default-values/"/>
    <updated>2015-12-19T23:10:31+00:00</updated>
    <id>http://mushketyk.com/2015/12/19/do-not-use-mutable-values-as-default-values</id>
    <content type="html"><![CDATA[In Python we can provide default values for function's arguments, which can make code more concise and readable:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">greetings</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;anonymous&quot;</span><span class="p">):</span>
</span><span class='line'>	<span class="k">print</span> <span class="s">&quot;Hi, {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">greetings</span><span class="p">(</span><span class="s">&quot;Joe&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">Hi</span><span class="p">,</span> <span class="n">Joe</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">greetings</span><span class="p">()</span>
</span><span class='line'><span class="n">Hi</span><span class="p">,</span> <span class="n">anonymous</span>
</span></code></pre></td></tr></table></div></figure>

However a seemingly innocuous code like this may cause significant problems:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_hostnames</span><span class="p">(</span><span class="n">hostnames</span><span class="o">=</span><span class="p">[]):</span>
</span><span class='line'>  <span class="n">hostnames</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;localhost&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">hostnames</span>
</span></code></pre></td></tr></table></div></figure>

<!--more-->

If we call it, it returns the expected list with "localhost" string in it, so everything seems fine:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">get_hostnames</span><span class="p">()</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;localhost&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>

But lets call the same function few more times:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">get_hostnames</span><span class="p">()</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;localhost&#39;</span><span class="p">,</span> <span class="s">&#39;localhost&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">get_hostnames</span><span class="p">()</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;localhost&#39;</span><span class="p">,</span> <span class="s">&#39;localhost&#39;</span><span class="p">,</span> <span class="s">&#39;localhost&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">get_hostnames</span><span class="p">()</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;localhost&#39;</span><span class="p">,</span> <span class="s">&#39;localhost&#39;</span><span class="p">,</span> <span class="s">&#39;localhost&#39;</span><span class="p">,</span> <span class="s">&#39;localhost&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>

What has just happened? This is definitely not what we expected!

It turns out that Python interpreter does not evaluates default arguments for every function call. Instead it evaluates them only once during execution. It results in the same list instance being used over and over again for every single function call.

## How to avoid this issue

Try to use immutable objects if you can. Mutability is the cause of the problem here and if an object cannot be changed it doesn't matter how many instances were created by Python interpreter. That's why it's ok to use strings and integers as default arguments.

However if you need to use mutable arguments you can implement the desired behavior: create a new instance of a default argument for every function call:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_hostnames</span><span class="p">(</span><span class="n">hostnames</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>  <span class="k">if</span> <span class="ow">not</span> <span class="n">hostnames</span><span class="p">:</span>
</span><span class='line'>    <span class="n">hostnames</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>  <span class="n">hostnames</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;localhost&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">hostnames</span>
</span></code></pre></td></tr></table></div></figure>

Now everything works as expected:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">get_hostnames</span><span class="p">()</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;localhost&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">get_hostnames</span><span class="p">()</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;localhost&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">get_hostnames</span><span class="p">()</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;localhost&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
</feed>

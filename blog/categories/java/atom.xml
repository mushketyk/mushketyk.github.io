<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | Software Developer's diary]]></title>
  <link href="http://mushketyk.com/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://mushketyk.com/"/>
  <updated>2015-12-26T17:59:45+00:00</updated>
  <id>http://mushketyk.com/</id>
  <author>
    <name><![CDATA[Ivan Mushketyk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hot Deployment With Gradle and Jetty]]></title>
    <link href="http://mushketyk.com/2015/08/30/hot-deployment-with-gradle-and-jetty/"/>
    <updated>2015-08-30T21:35:05+01:00</updated>
    <id>http://mushketyk.com/2015/08/30/hot-deployment-with-gradle-and-jetty</id>
    <content type="html"><![CDATA[In web development it's very handy to see updates to static content immediately, without a server restart.

In this blog post I'll write how to configure Gradle to support hot deployment with Jetty web server.

<!--more-->

First of all we need to create the following directory structure for the project:


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>├── build.gradle
</span><span class='line'>├── settings.gradle
</span><span class='line'>└── src
</span><span class='line'>    ├── main
</span><span class='line'>    │   ├── java
</span><span class='line'>    │   └── webapp
</span><span class='line'>    │       ├── WEB-INF
</span><span class='line'>    │       │   └── web.xml
</span><span class='line'>    │       └── ws # static content goes here
</span><span class='line'>    │           └── index.html
</span><span class='line'>    └── test</span></code></pre></td></tr></table></div></figure>

Here is the content of build.gradle:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">group</span> <span class="s1">&#39;my-project&#39;</span>
</span><span class='line'><span class="n">version</span> <span class="s1">&#39;0.0&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Plugin to support Java code compilation</span>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;java&#39;</span>
</span><span class='line'><span class="c1">// Plugin to support assembling application into a war</span>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;war&#39;</span>
</span><span class='line'><span class="c1">// Gretty plugin for hot deployment</span>
</span><span class='line'><span class="n">apply</span> <span class="nl">from:</span> <span class="s1">&#39;https://raw.github.com/akhikhl/gretty/master/pluginScripts/gretty.plugin&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">sourceCompatibility</span> <span class="o">=</span> <span class="mf">1.8</span>
</span><span class='line'>
</span><span class='line'><span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mavenCentral</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

Here is a content of settings.gradle:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">rootProject</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="s1">&#39;my-project&#39;</span>
</span></code></pre></td></tr></table></div></figure>

Now we need to configure web.xml how to serve static content:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;web-app</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="na">xmlns=</span><span class="s">&quot;http://java.sun.com/xml/ns/javaee&quot;</span> <span class="na">xmlns:web=</span><span class="s">&quot;http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</span> <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</span> <span class="na">id=</span><span class="s">&quot;WebApp_ID&quot;</span> <span class="na">version=</span><span class="s">&quot;2.5&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- &quot;default&quot; servlet is used for serving static content --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;servlet-mapping&gt;</span>
</span><span class='line'>        <span class="nt">&lt;servlet-name&gt;</span>default<span class="nt">&lt;/servlet-name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;url-pattern&gt;</span>*.html<span class="nt">&lt;/url-pattern&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/servlet-mapping&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- We can add other file types like *.js or *.css if necessary --&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- When our application is opened in a browser ws/index.html will be displayed --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;welcome-file-list&gt;</span>
</span><span class='line'>        <span class="nt">&lt;welcome-file&gt;</span>ws/index.html<span class="nt">&lt;/welcome-file&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/welcome-file-list&gt;</span>
</span><span class='line'><span class="nt">&lt;/web-app&gt;</span>
</span></code></pre></td></tr></table></div></figure>

Now we can deploy our application in Jetty with a single Gradle command:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># &quot;appRun&quot; goal was added by Gretty plugin</span>
</span><span class='line'>gradle appRun
</span></code></pre></td></tr></table></div></figure>

When you run this command you should see an output like:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>...
</span><span class='line'>:appRun
</span><span class='line'>21:53:07 INFO  Jetty 9.2.10.v20150310 started and listening on port 8080
</span><span class='line'>21:53:07 INFO  jersey sample runs at:
</span><span class='line'>21:53:07 INFO    http://localhost:8080/my-project
</span><span class='line'>Press any key to stop the server.
</span></code></pre></td></tr></table></div></figure>

The web site should be available via the following url: http://localhost:8080/open-board

If index.html is updated new changes would be reflected if you refresh a page in a browser. No server restart is needed.
]]></content>
  </entry>
  
</feed>

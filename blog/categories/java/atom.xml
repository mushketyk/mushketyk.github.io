<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | Software Developer's diary]]></title>
  <link href="http://mushketyk.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://mushketyk.github.io/"/>
  <updated>2015-09-01T22:17:02+01:00</updated>
  <id>http://mushketyk.github.io/</id>
  <author>
    <name><![CDATA[Ivan Mushketyk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hot Deployment With Gradle and Jetty]]></title>
    <link href="http://mushketyk.github.io/blog/2015/08/30/hot-deployment-with-gradle-and-jetty/"/>
    <updated>2015-08-30T21:35:05+01:00</updated>
    <id>http://mushketyk.github.io/blog/2015/08/30/hot-deployment-with-gradle-and-jetty</id>
    <content type="html"><![CDATA[<p>In web development it&rsquo;s very handy to see updates to static content immediately, without a server restart.</p>

<p>In this blog post I&rsquo;ll write how to configure Gradle to support hot deployment with Jetty web server.</p>

<!--more-->


<p>First of all we need to create the following directory structure for the project:</p>

<pre><code>├── build.gradle
├── settings.gradle
└── src
    ├── main
    │   ├── java
    │   └── webapp
    │       ├── WEB-INF
    │       │   └── web.xml
    │       └── ws # static content goes here
    │           └── index.html
    └── test
</code></pre>

<p>Here is the content of build.gradle:</p>

<pre><code class="groovy">
group 'my-project'
version '0.0'

// Plugin to support Java code compilation
apply plugin: 'java'
// Plugin to support assembling application into a war
apply plugin: 'war'
// Gretty plugin for hot deployment
apply from: 'https://raw.github.com/akhikhl/gretty/master/pluginScripts/gretty.plugin'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}
</code></pre>

<p>Here is a content of settings.gradle:</p>

<pre><code class="groovy">rootProject.name = 'my-project'
</code></pre>

<p>Now we need to configure web.xml how to serve static content:</p>

<pre><code class="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" id="WebApp_ID" version="2.5"&gt;

    &lt;!-- "default" servlet is used for serving static content --&gt;
    &lt;servlet-mapping&gt;
        &lt;servlet-name&gt;default&lt;/servlet-name&gt;
        &lt;url-pattern&gt;*.html&lt;/url-pattern&gt;
    &lt;/servlet-mapping&gt;
    &lt;!-- We can add other file types like *.js or *.css if necessary --&gt;

    &lt;!-- When our application is opened in a browser ws/index.html will be displayed --&gt;
    &lt;welcome-file-list&gt;
        &lt;welcome-file&gt;ws/index.html&lt;/welcome-file&gt;
    &lt;/welcome-file-list&gt;
&lt;/web-app&gt;
</code></pre>

<p>Now we can deploy our application in Jetty with a single Gradle command:</p>

<pre><code class="sh"># "appRun" goal was added by Gretty plugin
gradle appRun
</code></pre>

<p>When you run this command you should see an output like:</p>

<pre><code>...
:appRun
21:53:07 INFO  Jetty 9.2.10.v20150310 started and listening on port 8080
21:53:07 INFO  jersey sample runs at:
21:53:07 INFO    http://localhost:8080/my-project
Press any key to stop the server.
</code></pre>

<p>The web site should be available via the following url: <a href="http://localhost:8080/open-board">http://localhost:8080/open-board</a></p>

<p>If index.html is updated new changes would be reflected if you refresh a page in a browser. No server restart is needed.</p>
]]></content>
  </entry>
  
</feed>
